/* tslint:disable */
/* eslint-disable */
/**
 * job-support-admin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-20T03:40:16Z
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 * サインアップ後のアカウント検証フォーム
 * @export
 * @interface AccountVerificationInputs
 */
export interface AccountVerificationInputs {
  /**
   * クエリパラメータから取得
   * @type {string}
   * @memberof AccountVerificationInputs
   */
  login_id: string
  /**
   *
   * @type {string}
   * @memberof AccountVerificationInputs
   */
  verification_code: string
}
/**
 * アクションタイプ
 * @export
 * @interface ActionType
 */
export interface ActionType {
  /**
   *
   * @type {number}
   * @memberof ActionType
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof ActionType
   */
  key: string
  /**
   *
   * @type {string}
   * @memberof ActionType
   */
  label_name: string
  /**
   *
   * @type {string}
   * @memberof ActionType
   */
  template_message: string
  /**
   *
   * @type {boolean}
   * @memberof ActionType
   */
  is_notify: boolean
  /**
   *
   * @type {string}
   * @memberof ActionType
   */
  link: string
  /**
   *
   * @type {string}
   * @memberof ActionType
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof ActionType
   */
  updated_at: string
}
/**
 * 通知
 * @export
 * @interface Activity
 */
export interface Activity {
  /**
   *
   * @type {number}
   * @memberof Activity
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof Activity
   */
  user_id: number
  /**
   *
   * @type {User}
   * @memberof Activity
   */
  created_by: User
  /**
   *
   * @type {ActionType}
   * @memberof Activity
   */
  action_type: ActionType
  /**
   *
   * @type {boolean}
   * @memberof Activity
   */
  is_read?: boolean
  /**
   *
   * @type {number}
   * @memberof Activity
   */
  model_id?: number
  /**
   *
   * @type {string}
   * @memberof Activity
   */
  content: string
  /**
   *
   * @type {string}
   * @memberof Activity
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Activity
   */
  updated_at: string
}
/**
 * 認証時のデータ
 * @export
 * @interface Admin
 */
export interface Admin {
  /**
   *
   * @type {number}
   * @memberof Admin
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof Admin
   */
  full_name: string
  /**
   *
   * @type {string}
   * @memberof Admin
   */
  given_name: string
  /**
   *
   * @type {string}
   * @memberof Admin
   */
  given_name_kana: string
  /**
   *
   * @type {string}
   * @memberof Admin
   */
  family_name: string
  /**
   *
   * @type {string}
   * @memberof Admin
   */
  family_name_kana: string
  /**
   *
   * @type {string}
   * @memberof Admin
   */
  file_path?: string | null
  /**
   *
   * @type {string}
   * @memberof Admin
   */
  created_at?: string
  /**
   *
   * @type {string}
   * @memberof Admin
   */
  updated_at?: string
  /**
   *
   * @type {boolean}
   * @memberof Admin
   */
  is_initialized?: boolean
  /**
   *
   * @type {number}
   * @memberof Admin
   */
  organization_id?: number
  /**
   *
   * @type {string}
   * @memberof Admin
   */
  email?: string
  /**
   *
   * @type {string}
   * @memberof Admin
   */
  email_verified_at?: string
  /**
   *
   * @type {string}
   * @memberof Admin
   */
  createdBy?: string
  /**
   *
   * @type {User}
   * @memberof Admin
   */
  created_by?: User
  /**
   *
   * @type {string}
   * @memberof Admin
   */
  organization_name?: string
  /**
   *
   * @type {Organization}
   * @memberof Admin
   */
  organization?: Organization
  /**
   *
   * @type {Department}
   * @memberof Admin
   */
  department?: Department
}
/**
 * 管理者投稿フォーム
 * @export
 * @interface AdminInputs
 */
export interface AdminInputs {
  /**
   *
   * @type {string}
   * @memberof AdminInputs
   */
  given_name: string
  /**
   *
   * @type {string}
   * @memberof AdminInputs
   */
  given_name_kana: string
  /**
   *
   * @type {string}
   * @memberof AdminInputs
   */
  family_name: string
  /**
   *
   * @type {string}
   * @memberof AdminInputs
   */
  family_name_kana: string
  /**
   *
   * @type {string}
   * @memberof AdminInputs
   */
  email: string
}
/**
 * 認証時のデータ
 * @export
 * @interface AuthenticatedAdmin
 */
export interface AuthenticatedAdmin {
  /**
   * ユーザーID
   * @type {number}
   * @memberof AuthenticatedAdmin
   */
  id: number
  /**
   * フルネーム
   * @type {string}
   * @memberof AuthenticatedAdmin
   */
  full_name: string
  /**
   * 名
   * @type {string}
   * @memberof AuthenticatedAdmin
   */
  given_name?: string
  /**
   * 姓
   * @type {string}
   * @memberof AuthenticatedAdmin
   */
  family_name?: string
  /**
   * ファイルパス
   * @type {string}
   * @memberof AuthenticatedAdmin
   */
  file_path?: string | null
  /**
   *
   * @type {string}
   * @memberof AuthenticatedAdmin
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof AuthenticatedAdmin
   */
  updated_at: string
  /**
   *
   * @type {string}
   * @memberof AuthenticatedAdmin
   */
  jwt?: string
}
/**
 * ブログ
 * @export
 * @interface Blog
 */
export interface Blog {
  /**
   *
   * @type {number}
   * @memberof Blog
   */
  id: number
  /**
   *
   * @type {User}
   * @memberof Blog
   */
  written_by: User
  /**
   * タイトル
   * @type {string}
   * @memberof Blog
   */
  title: string
  /**
   * 記事の内容
   * @type {string}
   * @memberof Blog
   */
  body: string
  /**
   *
   * @type {string}
   * @memberof Blog
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Blog
   */
  updated_at: string
  /**
   *
   * @type {Array<BlogImage>}
   * @memberof Blog
   */
  images?: Array<BlogImage>
  /**
   *
   * @type {Array<User>}
   * @memberof Blog
   */
  likes: Array<User>
  /**
   *
   * @type {Array<BlogComment>}
   * @memberof Blog
   */
  comments: Array<BlogComment>
  /**
   *
   * @type {Array<Tag>}
   * @memberof Blog
   */
  tags: Array<Tag>
}
/**
 * ブログへのコメント
 * @export
 * @interface BlogComment
 */
export interface BlogComment {
  /**
   *
   * @type {number}
   * @memberof BlogComment
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof BlogComment
   */
  blog_id: number
  /**
   *
   * @type {User}
   * @memberof BlogComment
   */
  written_by: User
  /**
   *
   * @type {string}
   * @memberof BlogComment
   */
  body: string
  /**
   *
   * @type {string}
   * @memberof BlogComment
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof BlogComment
   */
  updated_at: string
}
/**
 * Blogのコメントフォーム
 * @export
 * @interface BlogCommentInputs
 */
export interface BlogCommentInputs {
  /**
   *
   * @type {number}
   * @memberof BlogCommentInputs
   */
  written_by: number
  /**
   *
   * @type {string}
   * @memberof BlogCommentInputs
   */
  body: string
}
/**
 * ブログ画像
 * @export
 * @interface BlogImage
 */
export interface BlogImage {
  /**
   *
   * @type {number}
   * @memberof BlogImage
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof BlogImage
   */
  blog_id: number
  /**
   *
   * @type {string}
   * @memberof BlogImage
   */
  file_path: string
  /**
   *
   * @type {string}
   * @memberof BlogImage
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof BlogImage
   */
  updated_at: string
}
/**
 * Blogの投稿フォーム
 * @export
 * @interface BlogInputs
 */
export interface BlogInputs {
  /**
   *
   * @type {string}
   * @memberof BlogInputs
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof BlogInputs
   */
  body: string
  /**
   *
   * @type {number}
   * @memberof BlogInputs
   */
  written_by?: number
  /**
   *
   * @type {Array<object>}
   * @memberof BlogInputs
   */
  images?: Array<object>
  /**
   * 初投稿時はなくても良い
   * @type {Array<string>}
   * @memberof BlogInputs
   */
  file_paths?: Array<string>
  /**
   *
   * @type {Array<number>}
   * @memberof BlogInputs
   */
  tags?: Array<number>
}
/**
 * ブログ一覧のページ（ページャつき）
 * @export
 * @interface BlogPage
 */
export interface BlogPage {
  /**
   *
   * @type {Array<Blog>}
   * @memberof BlogPage
   */
  data: Array<Blog>
  /**
   * 1ページ目のURL
   * @type {string}
   * @memberof BlogPage
   */
  first_page_url: string
  /**
   * 現在のitemの開始位置
   * @type {number}
   * @memberof BlogPage
   */
  from: number | null
  /**
   * 最大ページ数
   * @type {number}
   * @memberof BlogPage
   */
  last_page: number
  /**
   * 最終ページのURL
   * @type {string}
   * @memberof BlogPage
   */
  last_page_url: string
  /**
   * 次ページのURL
   * @type {string}
   * @memberof BlogPage
   */
  next_page_url: string | null
  /**
   * 前ページのURL
   * @type {string}
   * @memberof BlogPage
   */
  path: string
  /**
   * 1ページあたりのアイテム数
   * @type {number}
   * @memberof BlogPage
   */
  per_page: number
  /**
   * 前ページのURL
   * @type {string}
   * @memberof BlogPage
   */
  prev_page_url: string | null
  /**
   * 現在のitemの終了位置
   * @type {number}
   * @memberof BlogPage
   */
  to: number | null
  /**
   * item総数
   * @type {number}
   * @memberof BlogPage
   */
  total: number
}
/**
 * ユーザが任意でパスワードを変更したい時
 * @export
 * @interface ChangePasswordInputs
 */
export interface ChangePasswordInputs {
  /**
   *
   * @type {string}
   * @memberof ChangePasswordInputs
   */
  old_password: string
  /**
   *
   * @type {string}
   * @memberof ChangePasswordInputs
   */
  password: string
  /**
   *
   * @type {string}
   * @memberof ChangePasswordInputs
   */
  password_confirmation: string
}
/**
 * チャットメッセージ
 * @export
 * @interface ChatMessage
 */
export interface ChatMessage {
  /**
   *
   * @type {number}
   * @memberof ChatMessage
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof ChatMessage
   */
  body: string
  /**
   *
   * @type {User}
   * @memberof ChatMessage
   */
  written_by: User
  /**
   *
   * @type {User}
   * @memberof ChatMessage
   */
  to?: User
  /**
   *
   * @type {Array<ChatMessageImage>}
   * @memberof ChatMessage
   */
  images?: Array<ChatMessageImage>
  /**
   *
   * @type {Array<Reaction>}
   * @memberof ChatMessage
   */
  reactions?: Array<Reaction>
  /**
   *
   * @type {Array<User>}
   * @memberof ChatMessage
   */
  chat_message_reads?: Array<User>
  /**
   *
   * @type {string}
   * @memberof ChatMessage
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof ChatMessage
   */
  updated_at: string
  /**
   *
   * @type {boolean}
   * @memberof ChatMessage
   */
  mine?: boolean | null
}
/**
 * チャット画像
 * @export
 * @interface ChatMessageImage
 */
export interface ChatMessageImage {
  /**
   *
   * @type {number}
   * @memberof ChatMessageImage
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof ChatMessageImage
   */
  chat_message_id?: number
  /**
   *
   * @type {string}
   * @memberof ChatMessageImage
   */
  file_path: string
  /**
   *
   * @type {string}
   * @memberof ChatMessageImage
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof ChatMessageImage
   */
  updated_at: string
}
/**
 * ChatMessageの投稿フォーム
 * @export
 * @interface ChatMessageInputs
 */
export interface ChatMessageInputs {
  /**
   *
   * @type {number}
   * @memberof ChatMessageInputs
   */
  id?: number
  /**
   *
   * @type {number}
   * @memberof ChatMessageInputs
   */
  written_by: number
  /**
   *
   * @type {number}
   * @memberof ChatMessageInputs
   */
  mentioned_to: number | null
  /**
   *
   * @type {string}
   * @memberof ChatMessageInputs
   */
  body: string
  /**
   *
   * @type {Array<object>}
   * @memberof ChatMessageInputs
   */
  files?: Array<object>
}
/**
 * 既読
 * @export
 * @interface ChatMessageRead
 */
export interface ChatMessageRead {
  /**
   *
   * @type {number}
   * @memberof ChatMessageRead
   */
  id: number
  /**
   * 権限値
   * @type {number}
   * @memberof ChatMessageRead
   */
  chat_message_id: number
  /**
   *
   * @type {User}
   * @memberof ChatMessageRead
   */
  member: User
  /**
   *
   * @type {string}
   * @memberof ChatMessageRead
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof ChatMessageRead
   */
  updated_at: string
}
/**
 * チャット通報
 * @export
 * @interface ChatReport
 */
export interface ChatReport {
  /**
   *
   * @type {number}
   * @memberof ChatReport
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof ChatReport
   */
  chat_message_id: number
  /**
   *
   * @type {number}
   * @memberof ChatReport
   */
  report_category_id: number
  /**
   *
   * @type {boolean}
   * @memberof ChatReport
   */
  is_report: boolean
  /**
   *
   * @type {ReportCategory}
   * @memberof ChatReport
   */
  report_category?: ReportCategory
  /**
   *
   * @type {User}
   * @memberof ChatReport
   */
  created_by?: User
  /**
   *
   * @type {ChatMessage}
   * @memberof ChatReport
   */
  chat_message?: ChatMessage
  /**
   *
   * @type {string}
   * @memberof ChatReport
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof ChatReport
   */
  updated_at: string
}
/**
 * チャットルーム
 * @export
 * @interface ChatRoom
 */
export interface ChatRoom {
  /**
   *
   * @type {number}
   * @memberof ChatRoom
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof ChatRoom
   */
  name: string
  /**
   *
   * @type {Array<User>}
   * @memberof ChatRoom
   */
  members: Array<User>
  /**
   *
   * @type {Array<ChatMessage>}
   * @memberof ChatRoom
   */
  messages: Array<ChatMessage>
  /**
   *
   * @type {string}
   * @memberof ChatRoom
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof ChatRoom
   */
  updated_at: string
  /**
   *
   * @type {Array<LastRead>}
   * @memberof ChatRoom
   */
  last_reads?: Array<LastRead>
  /**
   *
   * @type {number}
   * @memberof ChatRoom
   */
  unread_count?: number
}
/**
 * ChatRoomの投稿フォーム
 * @export
 * @interface ChatRoomInputs
 */
export interface ChatRoomInputs {
  /**
   *
   * @type {number}
   * @memberof ChatRoomInputs
   */
  created_by: number | null
  /**
   *
   * @type {string}
   * @memberof ChatRoomInputs
   */
  name: string | null
  /**
   *
   * @type {object}
   * @memberof ChatRoomInputs
   */
  members?: object
}
/**
 * DefaultError
 * @export
 * @interface DefaultError
 */
export interface DefaultError {
  /**
   * エラーメッセージ
   * @type {string}
   * @memberof DefaultError
   */
  message?: string
}
/**
 * 部署マスター
 * @export
 * @interface Department
 */
export interface Department {
  /**
   *
   * @type {number}
   * @memberof Department
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof Department
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof Department
   */
  department_code: string
  /**
   *
   * @type {string}
   * @memberof Department
   */
  color?: string
  /**
   *
   * @type {string}
   * @memberof Department
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Department
   */
  updated_at: string
  /**
   *
   * @type {User}
   * @memberof Department
   */
  created_by: User
}
/**
 * 部署投稿フォーム
 * @export
 * @interface DepartmentInputs
 */
export interface DepartmentInputs {
  /**
   *
   * @type {string}
   * @memberof DepartmentInputs
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof DepartmentInputs
   */
  department_code?: string
  /**
   *
   * @type {string}
   * @memberof DepartmentInputs
   */
  color?: string
}
/**
 * ドキュメントファイル
 * @export
 * @interface DocumentFile
 */
export interface DocumentFile {
  /**
   *
   * @type {number}
   * @memberof DocumentFile
   */
  id: number
  /**
   *
   * @type {User}
   * @memberof DocumentFile
   */
  uploaded_by: User
  /**
   *
   * @type {string}
   * @memberof DocumentFile
   */
  file_path: string
  /**
   *
   * @type {string}
   * @memberof DocumentFile
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof DocumentFile
   */
  updated_at: string
  /**
   *
   * @type {Array<User>}
   * @memberof DocumentFile
   */
  shared_members?: Array<User>
}
/**
 * DocumentFileの投稿フォーム
 * @export
 * @interface DocumentFileInputs
 */
export interface DocumentFileInputs {
  /**
   *
   * @type {number}
   * @memberof DocumentFileInputs
   */
  uploaded_by: number
  /**
   *
   * @type {string}
   * @memberof DocumentFileInputs
   */
  file: string
  /**
   *
   * @type {object}
   * @memberof DocumentFileInputs
   */
  sharedMembers?: object
  /**
   * 更新時のみ
   * @type {string}
   * @memberof DocumentFileInputs
   */
  file_path?: string
}
/**
 * ドキュメントフォルダ
 * @export
 * @interface DocumentFolder
 */
export interface DocumentFolder {
  /**
   *
   * @type {number}
   * @memberof DocumentFolder
   */
  id: number
  /**
   *
   * @type {User}
   * @memberof DocumentFolder
   */
  created_by: User
  /**
   *
   * @type {string}
   * @memberof DocumentFolder
   */
  name: string
  /**
   *
   * @type {Role}
   * @memberof DocumentFolder
   */
  role?: Role
  /**
   *
   * @type {string}
   * @memberof DocumentFolder
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof DocumentFolder
   */
  updated_at: string
}
/**
 * DocumentFolderの投稿フォーム
 * @export
 * @interface DocumentFolderInputs
 */
export interface DocumentFolderInputs {
  /**
   *
   * @type {number}
   * @memberof DocumentFolderInputs
   */
  created_by?: number
  /**
   *
   * @type {string}
   * @memberof DocumentFolderInputs
   */
  name: string
  /**
   *
   * @type {number}
   * @memberof DocumentFolderInputs
   */
  role_id?: number
}
/**
 * FacialExpression
 * @export
 * @interface FacialExpression
 */
export interface FacialExpression {
  /**
   * エラーメッセージ
   * @type {number}
   * @memberof FacialExpression
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof FacialExpression
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof FacialExpression
   */
  file_path: string
}
/**
 * ForbiddenError
 * @export
 * @interface ForbiddenError
 */
export interface ForbiddenError {
  /**
   * エラーメッセージ
   * @type {string}
   * @memberof ForbiddenError
   */
  message?: string
}
/**
 * パスワードを忘れたときのフォーム
 * @export
 * @interface ForgotPasswordInputs
 */
export interface ForgotPasswordInputs {
  /**
   *
   * @type {string}
   * @memberof ForgotPasswordInputs
   */
  login_id: string
}
/**
 * InvalidError
 * @export
 * @interface InvalidError
 */
export interface InvalidError {
  /**
   * エラーメッセージ
   * @type {string}
   * @memberof InvalidError
   */
  message?: string
  /**
   * フォームアイテムごとのエラーメッセージ
   * @type {{ [key: string]: any; }}
   * @memberof InvalidError
   */
  errors?: { [key: string]: any }
}
/**
 * ユーザごとの最後に読んだメッセージ
 * @export
 * @interface LastRead
 */
export interface LastRead {
  /**
   *
   * @type {number}
   * @memberof LastRead
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof LastRead
   */
  chat_room_id: number
  /**
   *
   * @type {number}
   * @memberof LastRead
   */
  member_id: number
  /**
   *
   * @type {number}
   * @memberof LastRead
   */
  last_message_id: number
  /**
   *
   * @type {string}
   * @memberof LastRead
   */
  created_at?: string
}
/**
 * ミーティング決定事項
 * @export
 * @interface MeetingDecision
 */
export interface MeetingDecision {
  /**
   *
   * @type {number}
   * @memberof MeetingDecision
   */
  id: number
  /**
   *
   * @type {User}
   * @memberof MeetingDecision
   */
  decided_by: User
  /**
   *
   * @type {User}
   * @memberof MeetingDecision
   */
  written_by: User
  /**
   *
   * @type {string}
   * @memberof MeetingDecision
   */
  subject: string
  /**
   *
   * @type {string}
   * @memberof MeetingDecision
   */
  body: string
  /**
   *
   * @type {Array<Task>}
   * @memberof MeetingDecision
   */
  tasks?: Array<Task>
}
/**
 * ミーティング決定事項フォーム
 * @export
 * @interface MeetingDecisionInputs
 */
export interface MeetingDecisionInputs {
  /**
   *
   * @type {number}
   * @memberof MeetingDecisionInputs
   */
  id?: number
  /**
   *
   * @type {number}
   * @memberof MeetingDecisionInputs
   */
  decided_by?: number | null
  /**
   *
   * @type {number}
   * @memberof MeetingDecisionInputs
   */
  written_by: number
  /**
   *
   * @type {string}
   * @memberof MeetingDecisionInputs
   */
  subject?: string | null
  /**
   *
   * @type {string}
   * @memberof MeetingDecisionInputs
   */
  body: string
  /**
   *
   * @type {Array<TaskInputs>}
   * @memberof MeetingDecisionInputs
   */
  tasks?: Array<TaskInputs>
  /**
   *
   * @type {number}
   * @memberof MeetingDecisionInputs
   */
  flag?: number | null
}
/**
 * 議事録一覧のページ（ページャつき）
 * @export
 * @interface MeetingPage
 */
export interface MeetingPage {
  /**
   *
   * @type {Array<MeetingRecord>}
   * @memberof MeetingPage
   */
  data: Array<MeetingRecord>
  /**
   * 1ページ目のURL
   * @type {string}
   * @memberof MeetingPage
   */
  first_page_url: string
  /**
   * 現在のitemの開始位置
   * @type {number}
   * @memberof MeetingPage
   */
  from: number | null
  /**
   * 最大ページ数
   * @type {number}
   * @memberof MeetingPage
   */
  last_page: number
  /**
   * 最終ページのURL
   * @type {string}
   * @memberof MeetingPage
   */
  last_page_url: string
  /**
   * 次ページのURL
   * @type {string}
   * @memberof MeetingPage
   */
  next_page_url: string | null
  /**
   * 前ページのURL
   * @type {string}
   * @memberof MeetingPage
   */
  path: string
  /**
   * 1ページあたりのアイテム数
   * @type {number}
   * @memberof MeetingPage
   */
  per_page: number
  /**
   * 前ページのURL
   * @type {string}
   * @memberof MeetingPage
   */
  prev_page_url: string | null
  /**
   * 現在のitemの終了位置
   * @type {number}
   * @memberof MeetingPage
   */
  to: number | null
  /**
   * item総数
   * @type {number}
   * @memberof MeetingPage
   */
  total: number
}
/**
 * ミーティング開催場所
 * @export
 * @interface MeetingPlace
 */
export interface MeetingPlace {
  /**
   *
   * @type {number}
   * @memberof MeetingPlace
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof MeetingPlace
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof MeetingPlace
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof MeetingPlace
   */
  updated_at: string
  /**
   *
   * @type {User}
   * @memberof MeetingPlace
   */
  created_by: User
}
/**
 * 会議室投稿フォーム
 * @export
 * @interface MeetingPlaceInputs
 */
export interface MeetingPlaceInputs {
  /**
   *
   * @type {string}
   * @memberof MeetingPlaceInputs
   */
  name: string
}
/**
 * ミーティングレコード
 * @export
 * @interface MeetingRecord
 */
export interface MeetingRecord {
  /**
   *
   * @type {number}
   * @memberof MeetingRecord
   */
  id: number
  /**
   *
   * @type {User}
   * @memberof MeetingRecord
   */
  recorded_by: User
  /**
   *
   * @type {string}
   * @memberof MeetingRecord
   */
  meeting_date: string
  /**
   *
   * @type {MeetingPlace}
   * @memberof MeetingRecord
   */
  place: MeetingPlace
  /**
   *
   * @type {string}
   * @memberof MeetingRecord
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof MeetingRecord
   */
  summary: string | null
  /**
   *
   * @type {Array<User>}
   * @memberof MeetingRecord
   */
  members: Array<User>
  /**
   *
   * @type {Array<MeetingDecision>}
   * @memberof MeetingRecord
   */
  decisions: Array<MeetingDecision>
  /**
   *
   * @type {string}
   * @memberof MeetingRecord
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof MeetingRecord
   */
  updated_at: string
}
/**
 * 会議議事録投稿フォーム
 * @export
 * @interface MeetingRecordInputs
 */
export interface MeetingRecordInputs {
  /**
   *
   * @type {number}
   * @memberof MeetingRecordInputs
   */
  recorded_by: number
  /**
   *
   * @type {number}
   * @memberof MeetingRecordInputs
   */
  place_id?: number | null
  /**
   *
   * @type {string}
   * @memberof MeetingRecordInputs
   */
  meeting_date: string
  /**
   *
   * @type {string}
   * @memberof MeetingRecordInputs
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof MeetingRecordInputs
   */
  summary?: string | null
  /**
   *
   * @type {Array<MeetingDecisionInputs>}
   * @memberof MeetingRecordInputs
   */
  meeting_decisions?: Array<MeetingDecisionInputs>
  /**
   *
   * @type {Array<number>}
   * @memberof MeetingRecordInputs
   */
  members?: Array<number>
}
/**
 * 議事録一覧のページ（ページャつき）
 * @export
 * @interface MeetingRecordPage
 */
export interface MeetingRecordPage {
  /**
   *
   * @type {Array<MeetingRecord>}
   * @memberof MeetingRecordPage
   */
  data: Array<MeetingRecord>
  /**
   * 1ページ目のURL
   * @type {string}
   * @memberof MeetingRecordPage
   */
  first_page_url: string
  /**
   * 現在のitemの開始位置
   * @type {number}
   * @memberof MeetingRecordPage
   */
  from: number | null
  /**
   * 最大ページ数
   * @type {number}
   * @memberof MeetingRecordPage
   */
  last_page: number
  /**
   * 最終ページのURL
   * @type {string}
   * @memberof MeetingRecordPage
   */
  last_page_url: string
  /**
   * 次ページのURL
   * @type {string}
   * @memberof MeetingRecordPage
   */
  next_page_url: string | null
  /**
   * 前ページのURL
   * @type {string}
   * @memberof MeetingRecordPage
   */
  path: string
  /**
   * 1ページあたりのアイテム数
   * @type {number}
   * @memberof MeetingRecordPage
   */
  per_page: number
  /**
   * 前ページのURL
   * @type {string}
   * @memberof MeetingRecordPage
   */
  prev_page_url: string | null
  /**
   * 現在のitemの終了位置
   * @type {number}
   * @memberof MeetingRecordPage
   */
  to: number | null
  /**
   * item総数
   * @type {number}
   * @memberof MeetingRecordPage
   */
  total: number
}
/**
 * 共有相手用フォーム
 * @export
 * @interface MemberInputs
 */
export interface MemberInputs {
  /**
   *
   * @type {number}
   * @memberof MemberInputs
   */
  recorded_by: number
  /**
   *
   * @type {number}
   * @memberof MemberInputs
   */
  place_id?: number | null
  /**
   *
   * @type {string}
   * @memberof MemberInputs
   */
  meeting_date: string
  /**
   *
   * @type {string}
   * @memberof MemberInputs
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof MemberInputs
   */
  summary?: string | null
  /**
   *
   * @type {Array<MeetingDecisionInputs>}
   * @memberof MemberInputs
   */
  meeting_decisions?: Array<MeetingDecisionInputs>
  /**
   *
   * @type {Array<number>}
   * @memberof MemberInputs
   */
  members?: Array<number>
}
/**
 * NotFoundError
 * @export
 * @interface NotFoundError
 */
export interface NotFoundError {
  /**
   * エラーメッセージ
   * @type {string}
   * @memberof NotFoundError
   */
  message?: string
}
/**
 * 組織
 * @export
 * @interface Organization
 */
export interface Organization {
  /**
   *
   * @type {number}
   * @memberof Organization
   */
  id: number
  /**
   * 優先度
   * @type {string}
   * @memberof Organization
   */
  name: string
  /**
   * 優先度
   * @type {string}
   * @memberof Organization
   */
  name_kana: string
  /**
   * 優先値
   * @type {number}
   * @memberof Organization
   */
  pref_id: number
  /**
   * 優先値
   * @type {number}
   * @memberof Organization
   */
  postal_code: number
  /**
   * 優先度
   * @type {string}
   * @memberof Organization
   */
  city: string
  /**
   * 優先度
   * @type {string}
   * @memberof Organization
   */
  address: string
  /**
   * 優先度
   * @type {string}
   * @memberof Organization
   */
  tel: string
  /**
   * 優先値
   * @type {number}
   * @memberof Organization
   */
  supervisor_id?: number
  /**
   *
   * @type {string}
   * @memberof Organization
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Organization
   */
  updated_at: string
  /**
   *
   * @type {string}
   * @memberof Organization
   */
  file_path?: string
}
/**
 * 組織情報登録時のフォーム
 * @export
 * @interface OrganizationInputs
 */
export interface OrganizationInputs {
  /**
   *
   * @type {string}
   * @memberof OrganizationInputs
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof OrganizationInputs
   */
  name_kana: string
  /**
   *
   * @type {number}
   * @memberof OrganizationInputs
   */
  postal_code: number
  /**
   *
   * @type {number}
   * @memberof OrganizationInputs
   */
  pref_id: number
  /**
   *
   * @type {string}
   * @memberof OrganizationInputs
   */
  city: string
  /**
   *
   * @type {string}
   * @memberof OrganizationInputs
   */
  address: string
  /**
   *
   * @type {string}
   * @memberof OrganizationInputs
   */
  tel: string
  /**
   *
   * @type {string}
   * @memberof OrganizationInputs
   */
  password?: string
}
/**
 * パスワードリセットフォーム
 * @export
 * @interface PasswordResetInputs
 */
export interface PasswordResetInputs {
  /**
   *
   * @type {string}
   * @memberof PasswordResetInputs
   */
  old_password: string
  /**
   *
   * @type {string}
   * @memberof PasswordResetInputs
   */
  password: string
  /**
   *
   * @type {string}
   * @memberof PasswordResetInputs
   */
  password_confirmation: string
}
/**
 * 都道府県
 * @export
 * @interface Prefecture
 */
export interface Prefecture {
  /**
   *
   * @type {number}
   * @memberof Prefecture
   */
  id: number
  /**
   * 優先度
   * @type {string}
   * @memberof Prefecture
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof Prefecture
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Prefecture
   */
  updated_at: string
}
/**
 * TODOの優先度
 * @export
 * @interface Priority
 */
export interface Priority {
  /**
   *
   * @type {number}
   * @memberof Priority
   */
  id: number
  /**
   * 優先度
   * @type {string}
   * @memberof Priority
   */
  name: string
  /**
   * 優先値
   * @type {number}
   * @memberof Priority
   */
  value: number
  /**
   *
   * @type {string}
   * @memberof Priority
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Priority
   */
  updated_at: string
}
/**
 * プロフィール更新時のフォーム
 * @export
 * @interface ProfileInputs
 */
export interface ProfileInputs {
  /**
   *
   * @type {string}
   * @memberof ProfileInputs
   */
  family_name: string
  /**
   *
   * @type {string}
   * @memberof ProfileInputs
   */
  given_name: string
  /**
   *
   * @type {string}
   * @memberof ProfileInputs
   */
  family_name_kana: string
  /**
   *
   * @type {string}
   * @memberof ProfileInputs
   */
  given_name_kana: string
  /**
   *
   * @type {boolean}
   * @memberof ProfileInputs
   */
  delete_flag?: boolean
  /**
   *
   * @type {any}
   * @memberof ProfileInputs
   */
  file?: any
  /**
   *
   * @type {boolean}
   * @memberof ProfileInputs
   */
  change_password?: boolean
}
/**
 * TODOの達成度
 * @export
 * @interface Progress
 */
export interface Progress {
  /**
   *
   * @type {number}
   * @memberof Progress
   */
  id: number
  /**
   * 達成度
   * @type {string}
   * @memberof Progress
   */
  name: string
  /**
   * 達成値
   * @type {number}
   * @memberof Progress
   */
  value: number
  /**
   *
   * @type {string}
   * @memberof Progress
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Progress
   */
  updated_at: string
  /**
   *
   * @type {User}
   * @memberof Progress
   */
  created_by: User
  /**
   *
   * @type {boolean}
   * @memberof Progress
   */
  is_default?: boolean
}
/**
 * 進捗度投稿フォーム
 * @export
 * @interface ProgressInputs
 */
export interface ProgressInputs {
  /**
   *
   * @type {string}
   * @memberof ProgressInputs
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof ProgressInputs
   */
  value?: string
}
/**
 * リアクション
 * @export
 * @interface Reaction
 */
export interface Reaction {
  /**
   *
   * @type {number}
   * @memberof Reaction
   */
  id: number
  /**
   * 権限値
   * @type {number}
   * @memberof Reaction
   */
  chat_message_id: number
  /**
   *
   * @type {User}
   * @memberof Reaction
   */
  member: User
  /**
   *
   * @type {FacialExpression}
   * @memberof Reaction
   */
  facial_expression: FacialExpression
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  updated_at: string
}
/**
 *
 * @export
 * @interface ReportCategory
 */
export interface ReportCategory {
  /**
   *
   * @type {number}
   * @memberof ReportCategory
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof ReportCategory
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof ReportCategory
   */
  code: string
  /**
   *
   * @type {string}
   * @memberof ReportCategory
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof ReportCategory
   */
  updated_at: string
}
/**
 * パスワードリセットフォーム
 * @export
 * @interface ResetForgottenPasswordInputs
 */
export interface ResetForgottenPasswordInputs {
  /**
   *
   * @type {string}
   * @memberof ResetForgottenPasswordInputs
   */
  login_id: string
  /**
   *
   * @type {string}
   * @memberof ResetForgottenPasswordInputs
   */
  verification_code: string
  /**
   *
   * @type {string}
   * @memberof ResetForgottenPasswordInputs
   */
  password: string
  /**
   *
   * @type {string}
   * @memberof ResetForgottenPasswordInputs
   */
  password_confirmation: string
}
/**
 * ロール
 * @export
 * @interface Role
 */
export interface Role {
  /**
   *
   * @type {number}
   * @memberof Role
   */
  id: number
  /**
   * 権限名
   * @type {string}
   * @memberof Role
   */
  name: string
  /**
   * 権限値
   * @type {number}
   * @memberof Role
   */
  value: number
  /**
   *
   * @type {string}
   * @memberof Role
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Role
   */
  updated_at: string
}
/**
 * スケジュール
 * @export
 * @interface Schedule
 */
export interface Schedule {
  /**
   *
   * @type {number}
   * @memberof Schedule
   */
  id: number
  /**
   *
   * @type {User}
   * @memberof Schedule
   */
  scheduled_by: User
  /**
   *
   * @type {string}
   * @memberof Schedule
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof Schedule
   */
  start: string
  /**
   *
   * @type {string}
   * @memberof Schedule
   */
  end: string
  /**
   *
   * @type {boolean}
   * @memberof Schedule
   */
  is_public?: boolean
  /**
   *
   * @type {string}
   * @memberof Schedule
   */
  color?: string | null
  /**
   *
   * @type {string}
   * @memberof Schedule
   */
  memo?: string | null
  /**
   *
   * @type {Array<User>}
   * @memberof Schedule
   */
  shared_members: Array<User>
  /**
   *
   * @type {string}
   * @memberof Schedule
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Schedule
   */
  updated_at: string
}
/**
 * Scheduleの投稿フォーム
 * @export
 * @interface ScheduleInputs
 */
export interface ScheduleInputs {
  /**
   *
   * @type {number}
   * @memberof ScheduleInputs
   */
  scheduled_by: number
  /**
   *
   * @type {string}
   * @memberof ScheduleInputs
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof ScheduleInputs
   */
  start: string
  /**
   *
   * @type {string}
   * @memberof ScheduleInputs
   */
  end: string
  /**
   *
   * @type {boolean}
   * @memberof ScheduleInputs
   */
  is_public: boolean | null
  /**
   *
   * @type {string}
   * @memberof ScheduleInputs
   */
  color: string | null
  /**
   *
   * @type {string}
   * @memberof ScheduleInputs
   */
  memo: string | null
  /**
   *
   * @type {object}
   * @memberof ScheduleInputs
   */
  sharedMembers?: object
}
/**
 * 設定ページ
 * @export
 * @interface SettingInputs
 */
export interface SettingInputs {
  /**
   *
   * @type {object}
   * @memberof SettingInputs
   */
  notify_validation?: object
  /**
   *
   * @type {ChangePasswordInputs}
   * @memberof SettingInputs
   */
  change_password?: ChangePasswordInputs
}
/**
 * サインインフォーム
 * @export
 * @interface SigninInputs
 */
export interface SigninInputs {
  /**
   *
   * @type {string}
   * @memberof SigninInputs
   */
  login_id: string
  /**
   *
   * @type {string}
   * @memberof SigninInputs
   */
  password: string
}
/**
 * サインアップフォーム
 * @export
 * @interface SignupInputs
 */
export interface SignupInputs {
  /**
   *
   * @type {string}
   * @memberof SignupInputs
   */
  given_name: string
  /**
   *
   * @type {string}
   * @memberof SignupInputs
   */
  given_name_kana: string
  /**
   *
   * @type {string}
   * @memberof SignupInputs
   */
  family_name: string
  /**
   *
   * @type {string}
   * @memberof SignupInputs
   */
  family_name_kana: string
  /**
   *
   * @type {string}
   * @memberof SignupInputs
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof SignupInputs
   */
  password: string
  /**
   *
   * @type {string}
   * @memberof SignupInputs
   */
  password_confirmation: string
  /**
   *
   * @type {string}
   * @memberof SignupInputs
   */
  login_id: string
}
/**
 * Tag
 * @export
 * @interface Tag
 */
export interface Tag {
  /**
   *
   * @type {number}
   * @memberof Tag
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof Tag
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof Tag
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Tag
   */
  updated_at: string
}
/**
 * Task
 * @export
 * @interface Task
 */
export interface Task {
  /**
   *
   * @type {number}
   * @memberof Task
   */
  id: number
  /**
   *
   * @type {User}
   * @memberof Task
   */
  owner: User
  /**
   *
   * @type {User}
   * @memberof Task
   */
  created_by: User
  /**
   *
   * @type {Priority}
   * @memberof Task
   */
  priority: Priority
  /**
   *
   * @type {Progress}
   * @memberof Task
   */
  progress: Progress
  /**
   *
   * @type {string}
   * @memberof Task
   */
  body: string
  /**
   *
   * @type {string}
   * @memberof Task
   */
  time_limit: string
  /**
   *
   * @type {string}
   * @memberof Task
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Task
   */
  updated_at: string
}
/**
 * Taskの投稿フォーム
 * @export
 * @interface TaskInputs
 */
export interface TaskInputs {
  /**
   *
   * @type {number}
   * @memberof TaskInputs
   */
  id?: number
  /**
   *
   * @type {number}
   * @memberof TaskInputs
   */
  owner_id: number
  /**
   *
   * @type {number}
   * @memberof TaskInputs
   */
  created_by?: number
  /**
   *
   * @type {number}
   * @memberof TaskInputs
   */
  priority_id?: number | null
  /**
   *
   * @type {number}
   * @memberof TaskInputs
   */
  progress_id?: number | null
  /**
   *
   * @type {string}
   * @memberof TaskInputs
   */
  body: string
  /**
   *
   * @type {string}
   * @memberof TaskInputs
   */
  time_limit: string
  /**
   *
   * @type {number}
   * @memberof TaskInputs
   */
  flag?: number | null
}
/**
 * タスク一覧のページ（ページャつき）
 * @export
 * @interface TaskPage
 */
export interface TaskPage {
  /**
   *
   * @type {Array<Task>}
   * @memberof TaskPage
   */
  data: Array<Task>
  /**
   * 1ページ目のURL
   * @type {string}
   * @memberof TaskPage
   */
  first_page_url: string
  /**
   * 現在のitemの開始位置
   * @type {number}
   * @memberof TaskPage
   */
  from: number | null
  /**
   * 最大ページ数
   * @type {number}
   * @memberof TaskPage
   */
  last_page: number
  /**
   * 最終ページのURL
   * @type {string}
   * @memberof TaskPage
   */
  last_page_url: string
  /**
   * 次ページのURL
   * @type {string}
   * @memberof TaskPage
   */
  next_page_url: string | null
  /**
   * 前ページのURL
   * @type {string}
   * @memberof TaskPage
   */
  path: string
  /**
   * 1ページあたりのアイテム数
   * @type {number}
   * @memberof TaskPage
   */
  per_page: number
  /**
   * 前ページのURL
   * @type {string}
   * @memberof TaskPage
   */
  prev_page_url: string | null
  /**
   * 現在のitemの終了位置
   * @type {number}
   * @memberof TaskPage
   */
  to: number | null
  /**
   * item総数
   * @type {number}
   * @memberof TaskPage
   */
  total: number
}
/**
 * ユーザーのデータ
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof User
   */
  full_name: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  given_name: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  given_name_kana: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  family_name: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  family_name_kana: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  file_path?: string | null
  /**
   *
   * @type {string}
   * @memberof User
   */
  created_at?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  updated_at?: string
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  is_initialized?: boolean
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  is_invited: boolean
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  email_verified_at?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  createdBy?: string
  /**
   *
   * @type {User}
   * @memberof User
   */
  created_by?: User
  /**
   *
   * @type {number}
   * @memberof User
   */
  organization_id?: number
  /**
   *
   * @type {Organization}
   * @memberof User
   */
  organization?: Organization
  /**
   *
   * @type {Department}
   * @memberof User
   */
  department?: Department
}
/**
 * ユーザー投稿フォーム
 * @export
 * @interface UserInputs
 */
export interface UserInputs {
  /**
   *
   * @type {string}
   * @memberof UserInputs
   */
  given_name: string
  /**
   *
   * @type {string}
   * @memberof UserInputs
   */
  given_name_kana: string
  /**
   *
   * @type {string}
   * @memberof UserInputs
   */
  family_name: string
  /**
   *
   * @type {string}
   * @memberof UserInputs
   */
  family_name_kana: string
  /**
   *
   * @type {string}
   * @memberof UserInputs
   */
  email: string
  /**
   *
   * @type {number}
   * @memberof UserInputs
   */
  department_id?: number
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * delete admin
     * @summary /admin/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAdminId: async (
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteAdminId', 'id', id)
      const localVarPath = `/admin/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * delete department
     * @summary /department/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDepartmentId: async (
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteDepartmentId', 'id', id)
      const localVarPath = `/department/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * delete meeting place
     * @summary /meeting_place/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeetingPlaceId: async (
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteMeetingPlaceId', 'id', id)
      const localVarPath = `/meeting_place/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * delete organization
     * @summary /progress/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationId: async (
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteOrganizationId', 'id', id)
      const localVarPath = `/organization/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * delete progress
     * @summary /progress/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProgressId: async (
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteProgressId', 'id', id)
      const localVarPath = `/progress/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * delete meeting record
     * @summary /task/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaskId: async (
      id: string,
      authorization?: string,
      origin?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteTaskId', 'id', id)
      const localVarPath = `/task/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * delete user
     * @summary /user/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserId: async (
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteUserId', 'id', id)
      const localVarPath = `/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * アクティビティ
     * @summary /activity-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivity: async (
      authorization?: string,
      origin?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/activity`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 会議の参加者を入力するドロップダウンリスト等に使用
     * @summary /admin-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [email]
     * @param {string} [likely]
     * @param {string} [slim]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdmin: async (
      authorization?: string,
      origin?: string,
      email?: string,
      likely?: string,
      slim?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (email !== undefined) {
        localVarQueryParameter['email'] = email
      }

      if (likely !== undefined) {
        localVarQueryParameter['likely'] = likely
      }

      if (slim !== undefined) {
        localVarQueryParameter['slim'] = slim
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * return admin acitivity by id
     * @summary /admin/{id}/activity-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [authenticatable]
     * @param {string} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdminActivity: async (
      id: string,
      authorization?: string,
      origin?: string,
      authenticatable?: string,
      page?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getAdminActivity', 'id', id)
      const localVarPath = `/admin/{id}/activity`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authenticatable !== undefined) {
        localVarQueryParameter['authenticatable'] = authenticatable
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * return admin by id
     * @summary /admin/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdminId: async (
      id: string,
      authorization?: string,
      origin?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getAdminId', 'id', id)
      const localVarPath = `/admin/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * ブログチャート
     * @summary /blog/chart-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [group]
     * @param {string} [createdByTable]
     * @param {string} [createdBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogChart: async (
      authorization?: string,
      origin?: string,
      group?: string,
      createdByTable?: string,
      createdBy?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog/chart`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (group !== undefined) {
        localVarQueryParameter['group'] = group
      }

      if (createdByTable !== undefined) {
        localVarQueryParameter['created_by_table'] = createdByTable
      }

      if (createdBy !== undefined) {
        localVarQueryParameter['created_by'] = createdBy
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * チャットチャート
     * @summary /chat/chart-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [group]
     * @param {string} [createdByTable]
     * @param {string} [createdBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChatChart: async (
      authorization?: string,
      origin?: string,
      group?: string,
      createdByTable?: string,
      createdBy?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/chat/chart`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (group !== undefined) {
        localVarQueryParameter['group'] = group
      }

      if (createdByTable !== undefined) {
        localVarQueryParameter['created_by_table'] = createdByTable
      }

      if (createdBy !== undefined) {
        localVarQueryParameter['created_by'] = createdBy
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * チャット報告
     * @summary /chat_report-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChatReport: async (
      authorization?: string,
      origin?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/chat_report`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * return current admin
     * @summary /admin/current-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentAdmin: async (
      authorization?: string,
      origin?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/current`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 部署一覧
     * @summary /department-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [name]
     * @param {string} [likely]
     * @param {string} [departmentCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDepartment: async (
      authorization?: string,
      origin?: string,
      name?: string,
      likely?: string,
      departmentCode?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/department`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (name !== undefined) {
        localVarQueryParameter['name'] = name
      }

      if (likely !== undefined) {
        localVarQueryParameter['likely'] = likely
      }

      if (departmentCode !== undefined) {
        localVarQueryParameter['department_code'] = departmentCode
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * return department by id
     * @summary /department/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDepartmentId: async (
      id: string,
      authorization?: string,
      origin?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getDepartmentId', 'id', id)
      const localVarPath = `/department/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 会議室一覧
     * @summary /meeting_place-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [name]
     * @param {string} [likely]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeetingPlace: async (
      authorization?: string,
      origin?: string,
      name?: string,
      likely?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/meeting_place`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (name !== undefined) {
        localVarQueryParameter['name'] = name
      }

      if (likely !== undefined) {
        localVarQueryParameter['likely'] = likely
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * return meeting place by id
     * @summary /meeting_place/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeetingPlaceId: async (
      id: string,
      authorization?: string,
      origin?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getMeetingPlaceId', 'id', id)
      const localVarPath = `/meeting_place/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 議事録チャート
     * @summary /meeting_record/chart-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [group]
     * @param {string} [createdByTable]
     * @param {string} [createdBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeetingRecordChart: async (
      authorization?: string,
      origin?: string,
      group?: string,
      createdByTable?: string,
      createdBy?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/meeting_record/chart`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (group !== undefined) {
        localVarQueryParameter['group'] = group
      }

      if (createdByTable !== undefined) {
        localVarQueryParameter['created_by_table'] = createdByTable
      }

      if (createdBy !== undefined) {
        localVarQueryParameter['created_by'] = createdBy
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 都道府県一覧
     * @summary /prefecture-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPrefecture: async (
      authorization?: string,
      origin?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/prefecture`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 進捗度一覧
     * @summary /progress-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [name]
     * @param {string} [likely]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProgress: async (
      authorization?: string,
      origin?: string,
      name?: string,
      likely?: string,
      value?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/progress`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (name !== undefined) {
        localVarQueryParameter['name'] = name
      }

      if (likely !== undefined) {
        localVarQueryParameter['likely'] = likely
      }

      if (value !== undefined) {
        localVarQueryParameter['value'] = value
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * return progress by id
     * @summary /progress/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProgressId: async (
      id: string,
      authorization?: string,
      origin?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getProgressId', 'id', id)
      const localVarPath = `/progress/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoot: async (
      authorization?: string,
      origin?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 会議の参加者を入力するドロップダウンリスト等に使用
     * @summary /user-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [email]
     * @param {string} [likely]
     * @param {string} [slim]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (
      authorization?: string,
      origin?: string,
      email?: string,
      likely?: string,
      slim?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (email !== undefined) {
        localVarQueryParameter['email'] = email
      }

      if (likely !== undefined) {
        localVarQueryParameter['likely'] = likely
      }

      if (slim !== undefined) {
        localVarQueryParameter['slim'] = slim
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * return user acitivity by id
     * @summary /user/{id}/activity-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [authenticatable]
     * @param {string} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserActivity: async (
      id: string,
      authorization?: string,
      origin?: string,
      authenticatable?: string,
      page?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getUserActivity', 'id', id)
      const localVarPath = `/user/{id}/activity`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authenticatable !== undefined) {
        localVarQueryParameter['authenticatable'] = authenticatable
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * return user by id
     * @summary /user/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserId: async (
      id: string,
      authorization?: string,
      origin?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getUserId', 'id', id)
      const localVarPath = `/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /activity-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionActivity: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/activity`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /admin-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionAdmin: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /blog/chart-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionBlogChart: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/blog/chart`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /chat/chart-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionChatChart: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/chat/chart`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /chat_report-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionChatReport: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/chat_report`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /department-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionDepartment: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/department`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /meeting_place-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionMeetingPlace: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/meeting_place`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /meeting_record-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionMeetingRecord: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/meeting_record/chart`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /progress-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionPrefecture: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/prefecture`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /progress-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionProgress: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/progress`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * preflight
     * @summary /task/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionTaskId: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('optionTaskId', 'id', id)
      const localVarPath = `/task/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /user-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionUser: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /user/{id}/activity-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsAdminActivity: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('optionsAdminActivity', 'id', id)
      const localVarPath = `/admin/{id}/activity`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /admin/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsAdminId: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('optionsAdminId', 'id', id)
      const localVarPath = `/admin/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /admin/current-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsCurrentAdmin: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/current`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /user/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsDepartmentId: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('optionsDepartmentId', 'id', id)
      const localVarPath = `/department/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /meeting_place/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsMeetingPlaceId: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('optionsMeetingPlaceId', 'id', id)
      const localVarPath = `/meeting_place/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /progress/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsOrganizationId: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('optionsOrganizationId', 'id', id)
      const localVarPath = `/organization/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /progress/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsProgressId: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('optionsProgressId', 'id', id)
      const localVarPath = `/progress/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsRoot: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /user/{id}/activity-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsUserActivity: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('optionsUserActivity', 'id', id)
      const localVarPath = `/user/{id}/activity`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /user/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsUserId: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('optionsUserId', 'id', id)
      const localVarPath = `/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * post admin
     * @summary /admin-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {UserInputs} [userInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAdmin: async (
      authorization?: string,
      origin?: string,
      userInputs?: UserInputs,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        userInputs,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * post department
     * @summary /department-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {DepartmentInputs} [departmentInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDepartment: async (
      authorization?: string,
      origin?: string,
      departmentInputs?: DepartmentInputs,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/department`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        departmentInputs,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * post meeting place
     * @summary /meeting_place-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {MeetingPlaceInputs} [meetingPlaceInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMeetingPlace: async (
      authorization?: string,
      origin?: string,
      meetingPlaceInputs?: MeetingPlaceInputs,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/meeting_place`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        meetingPlaceInputs,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * post progress
     * @summary /progress-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {ProgressInputs} [progressInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProgress: async (
      authorization?: string,
      origin?: string,
      progressInputs?: ProgressInputs,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/progress`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        progressInputs,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * post user
     * @summary /user-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {UserInputs} [userInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUser: async (
      authorization?: string,
      origin?: string,
      userInputs?: UserInputs,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        userInputs,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * update admin
     * @summary /admin/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {AdminInputs} [adminInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAdminId: async (
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      adminInputs?: AdminInputs,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putAdminId', 'id', id)
      const localVarPath = `/admin/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (xHTTPMethodOverride !== undefined && xHTTPMethodOverride !== null) {
        localVarHeaderParameter['X-HTTP-Method-Override'] =
          String(xHTTPMethodOverride)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        adminInputs,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * update department
     * @summary /department/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {DepartmentInputs} [departmentInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDepartmentId: async (
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      departmentInputs?: DepartmentInputs,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putDepartmentId', 'id', id)
      const localVarPath = `/department/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (xHTTPMethodOverride !== undefined && xHTTPMethodOverride !== null) {
        localVarHeaderParameter['X-HTTP-Method-Override'] =
          String(xHTTPMethodOverride)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        departmentInputs,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * update meeting place
     * @summary /meeting_place/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {MeetingPlaceInputs} [meetingPlaceInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMeetingPlaceId: async (
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      meetingPlaceInputs?: MeetingPlaceInputs,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putMeetingPlaceId', 'id', id)
      const localVarPath = `/meeting_place/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (xHTTPMethodOverride !== undefined && xHTTPMethodOverride !== null) {
        localVarHeaderParameter['X-HTTP-Method-Override'] =
          String(xHTTPMethodOverride)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        meetingPlaceInputs,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * update organization
     * @summary /organization/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {OrganizationInputs} [organizationInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrganizationId: async (
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      organizationInputs?: OrganizationInputs,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putOrganizationId', 'id', id)
      const localVarPath = `/organization/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (xHTTPMethodOverride !== undefined && xHTTPMethodOverride !== null) {
        localVarHeaderParameter['X-HTTP-Method-Override'] =
          String(xHTTPMethodOverride)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        organizationInputs,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * update progress
     * @summary /progress/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {ProgressInputs} [progressInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProgressId: async (
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      progressInputs?: ProgressInputs,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putProgressId', 'id', id)
      const localVarPath = `/progress/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (xHTTPMethodOverride !== undefined && xHTTPMethodOverride !== null) {
        localVarHeaderParameter['X-HTTP-Method-Override'] =
          String(xHTTPMethodOverride)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        progressInputs,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * update Task
     * @summary /task/{id}-PUT
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [xHTTPMethodOverride]
     * @param {TaskInputs} [taskInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTaskId: async (
      id: string,
      authorization?: string,
      origin?: string,
      xHTTPMethodOverride?: string,
      taskInputs?: TaskInputs,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putTaskId', 'id', id)
      const localVarPath = `/task/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      if (xHTTPMethodOverride !== undefined && xHTTPMethodOverride !== null) {
        localVarHeaderParameter['X-HTTP-Method-Override'] =
          String(xHTTPMethodOverride)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        taskInputs,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * update user
     * @summary /user/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {UserInputs} [userInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserId: async (
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      userInputs?: UserInputs,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putUserId', 'id', id)
      const localVarPath = `/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-admin-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (xHTTPMethodOverride !== undefined && xHTTPMethodOverride !== null) {
        localVarHeaderParameter['X-HTTP-Method-Override'] =
          String(xHTTPMethodOverride)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        userInputs,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
  return {
    /**
     * delete admin
     * @summary /admin/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAdminId(
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdminId(
        id,
        authorization,
        origin,
        body,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * delete department
     * @summary /department/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteDepartmentId(
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteDepartmentId(
          id,
          authorization,
          origin,
          body,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * delete meeting place
     * @summary /meeting_place/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMeetingPlaceId(
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteMeetingPlaceId(
          id,
          authorization,
          origin,
          body,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * delete organization
     * @summary /progress/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrganizationId(
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteOrganizationId(
          id,
          authorization,
          origin,
          body,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * delete progress
     * @summary /progress/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteProgressId(
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteProgressId(
          id,
          authorization,
          origin,
          body,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * delete meeting record
     * @summary /task/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTaskId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskPage>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTaskId(
        id,
        authorization,
        origin,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * delete user
     * @summary /user/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserId(
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserId(
        id,
        authorization,
        origin,
        body,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * アクティビティ
     * @summary /activity-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getActivity(
      authorization?: string,
      origin?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Activity>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getActivity(
        authorization,
        origin,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * 会議の参加者を入力するドロップダウンリスト等に使用
     * @summary /admin-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [email]
     * @param {string} [likely]
     * @param {string} [slim]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAdmin(
      authorization?: string,
      origin?: string,
      email?: string,
      likely?: string,
      slim?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Admin>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmin(
        authorization,
        origin,
        email,
        likely,
        slim,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * return admin acitivity by id
     * @summary /admin/{id}/activity-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [authenticatable]
     * @param {string} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAdminActivity(
      id: string,
      authorization?: string,
      origin?: string,
      authenticatable?: string,
      page?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Activity>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAdminActivity(
          id,
          authorization,
          origin,
          authenticatable,
          page,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * return admin by id
     * @summary /admin/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAdminId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Admin>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAdminId(
        id,
        authorization,
        origin,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * ブログチャート
     * @summary /blog/chart-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [group]
     * @param {string} [createdByTable]
     * @param {string} [createdBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBlogChart(
      authorization?: string,
      origin?: string,
      group?: string,
      createdByTable?: string,
      createdBy?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ChatMessage>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBlogChart(
        authorization,
        origin,
        group,
        createdByTable,
        createdBy,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * チャットチャート
     * @summary /chat/chart-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [group]
     * @param {string} [createdByTable]
     * @param {string} [createdBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChatChart(
      authorization?: string,
      origin?: string,
      group?: string,
      createdByTable?: string,
      createdBy?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ChatMessage>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChatChart(
        authorization,
        origin,
        group,
        createdByTable,
        createdBy,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * チャット報告
     * @summary /chat_report-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getChatReport(
      authorization?: string,
      origin?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Activity>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getChatReport(
        authorization,
        origin,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * return current admin
     * @summary /admin/current-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrentAdmin(
      authorization?: string,
      origin?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentAdmin(
        authorization,
        origin,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * 部署一覧
     * @summary /department-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [name]
     * @param {string} [likely]
     * @param {string} [departmentCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDepartment(
      authorization?: string,
      origin?: string,
      name?: string,
      likely?: string,
      departmentCode?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Department>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDepartment(
        authorization,
        origin,
        name,
        likely,
        departmentCode,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * return department by id
     * @summary /department/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDepartmentId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDepartmentId(
        id,
        authorization,
        origin,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * 会議室一覧
     * @summary /meeting_place-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [name]
     * @param {string} [likely]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMeetingPlace(
      authorization?: string,
      origin?: string,
      name?: string,
      likely?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<MeetingPlace>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingPlace(
        authorization,
        origin,
        name,
        likely,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * return meeting place by id
     * @summary /meeting_place/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMeetingPlaceId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingPlace>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMeetingPlaceId(
          id,
          authorization,
          origin,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * 議事録チャート
     * @summary /meeting_record/chart-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [group]
     * @param {string} [createdByTable]
     * @param {string} [createdBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMeetingRecordChart(
      authorization?: string,
      origin?: string,
      group?: string,
      createdByTable?: string,
      createdBy?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<MeetingRecord>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMeetingRecordChart(
          authorization,
          origin,
          group,
          createdByTable,
          createdBy,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * 都道府県一覧
     * @summary /prefecture-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPrefecture(
      authorization?: string,
      origin?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Progress>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPrefecture(
        authorization,
        origin,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * 進捗度一覧
     * @summary /progress-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [name]
     * @param {string} [likely]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProgress(
      authorization?: string,
      origin?: string,
      name?: string,
      likely?: string,
      value?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Progress>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProgress(
        authorization,
        origin,
        name,
        likely,
        value,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * return progress by id
     * @summary /progress/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProgressId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Progress>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProgressId(
        id,
        authorization,
        origin,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRoot(
      authorization?: string,
      origin?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRoot(
        authorization,
        origin,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * 会議の参加者を入力するドロップダウンリスト等に使用
     * @summary /user-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [email]
     * @param {string} [likely]
     * @param {string} [slim]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      authorization?: string,
      origin?: string,
      email?: string,
      likely?: string,
      slim?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(
        authorization,
        origin,
        email,
        likely,
        slim,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * return user acitivity by id
     * @summary /user/{id}/activity-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [authenticatable]
     * @param {string} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserActivity(
      id: string,
      authorization?: string,
      origin?: string,
      authenticatable?: string,
      page?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Activity>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserActivity(
        id,
        authorization,
        origin,
        authenticatable,
        page,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * return user by id
     * @summary /user/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserId(
        id,
        authorization,
        origin,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /activity-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionActivity(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.optionActivity(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /admin-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionAdmin(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.optionAdmin(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /blog/chart-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionBlogChart(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.optionBlogChart(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /chat/chart-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionChatChart(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.optionChatChart(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /chat_report-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionChatReport(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.optionChatReport(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /department-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionDepartment(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.optionDepartment(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /meeting_place-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionMeetingPlace(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.optionMeetingPlace(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /meeting_record-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionMeetingRecord(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.optionMeetingRecord(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /progress-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionPrefecture(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.optionPrefecture(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /progress-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionProgress(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.optionProgress(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * preflight
     * @summary /task/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionTaskId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.optionTaskId(
        id,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /user-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionUser(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.optionUser(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /user/{id}/activity-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionsAdminActivity(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.optionsAdminActivity(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /admin/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionsAdminId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.optionsAdminId(
        id,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /admin/current-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionsCurrentAdmin(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.optionsCurrentAdmin(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /user/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionsDepartmentId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.optionsDepartmentId(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /meeting_place/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionsMeetingPlaceId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.optionsMeetingPlaceId(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /progress/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionsOrganizationId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.optionsOrganizationId(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /progress/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionsProgressId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.optionsProgressId(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionsRoot(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.optionsRoot(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /user/{id}/activity-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionsUserActivity(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.optionsUserActivity(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /user/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionsUserId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.optionsUserId(
        id,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * post admin
     * @summary /admin-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {UserInputs} [userInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postAdmin(
      authorization?: string,
      origin?: string,
      userInputs?: UserInputs,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postAdmin(
        authorization,
        origin,
        userInputs,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * post department
     * @summary /department-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {DepartmentInputs} [departmentInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postDepartment(
      authorization?: string,
      origin?: string,
      departmentInputs?: DepartmentInputs,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postDepartment(
        authorization,
        origin,
        departmentInputs,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * post meeting place
     * @summary /meeting_place-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {MeetingPlaceInputs} [meetingPlaceInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postMeetingPlace(
      authorization?: string,
      origin?: string,
      meetingPlaceInputs?: MeetingPlaceInputs,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingPlace>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postMeetingPlace(
          authorization,
          origin,
          meetingPlaceInputs,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * post progress
     * @summary /progress-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {ProgressInputs} [progressInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postProgress(
      authorization?: string,
      origin?: string,
      progressInputs?: ProgressInputs,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Progress>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postProgress(
        authorization,
        origin,
        progressInputs,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * post user
     * @summary /user-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {UserInputs} [userInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postUser(
      authorization?: string,
      origin?: string,
      userInputs?: UserInputs,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postUser(
        authorization,
        origin,
        userInputs,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * update admin
     * @summary /admin/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {AdminInputs} [adminInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putAdminId(
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      adminInputs?: AdminInputs,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putAdminId(
        id,
        origin,
        authorization,
        xHTTPMethodOverride,
        adminInputs,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * update department
     * @summary /department/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {DepartmentInputs} [departmentInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putDepartmentId(
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      departmentInputs?: DepartmentInputs,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putDepartmentId(
        id,
        origin,
        authorization,
        xHTTPMethodOverride,
        departmentInputs,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * update meeting place
     * @summary /meeting_place/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {MeetingPlaceInputs} [meetingPlaceInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putMeetingPlaceId(
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      meetingPlaceInputs?: MeetingPlaceInputs,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingPlace>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.putMeetingPlaceId(
          id,
          origin,
          authorization,
          xHTTPMethodOverride,
          meetingPlaceInputs,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * update organization
     * @summary /organization/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {OrganizationInputs} [organizationInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putOrganizationId(
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      organizationInputs?: OrganizationInputs,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.putOrganizationId(
          id,
          origin,
          authorization,
          xHTTPMethodOverride,
          organizationInputs,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * update progress
     * @summary /progress/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {ProgressInputs} [progressInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putProgressId(
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      progressInputs?: ProgressInputs,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Progress>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putProgressId(
        id,
        origin,
        authorization,
        xHTTPMethodOverride,
        progressInputs,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * update Task
     * @summary /task/{id}-PUT
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [xHTTPMethodOverride]
     * @param {TaskInputs} [taskInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putTaskId(
      id: string,
      authorization?: string,
      origin?: string,
      xHTTPMethodOverride?: string,
      taskInputs?: TaskInputs,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putTaskId(
        id,
        authorization,
        origin,
        xHTTPMethodOverride,
        taskInputs,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * update user
     * @summary /user/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {UserInputs} [userInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putUserId(
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      userInputs?: UserInputs,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putUserId(
        id,
        origin,
        authorization,
        xHTTPMethodOverride,
        userInputs,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration)
  return {
    /**
     * delete admin
     * @summary /admin/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAdminId(
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options?: any
    ): AxiosPromise<Admin> {
      return localVarFp
        .deleteAdminId(id, authorization, origin, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * delete department
     * @summary /department/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDepartmentId(
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .deleteDepartmentId(id, authorization, origin, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * delete meeting place
     * @summary /meeting_place/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeetingPlaceId(
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .deleteMeetingPlaceId(id, authorization, origin, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * delete organization
     * @summary /progress/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationId(
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .deleteOrganizationId(id, authorization, origin, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * delete progress
     * @summary /progress/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProgressId(
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .deleteProgressId(id, authorization, origin, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * delete meeting record
     * @summary /task/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaskId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: any
    ): AxiosPromise<TaskPage> {
      return localVarFp
        .deleteTaskId(id, authorization, origin, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * delete user
     * @summary /user/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserId(
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options?: any
    ): AxiosPromise<User> {
      return localVarFp
        .deleteUserId(id, authorization, origin, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * アクティビティ
     * @summary /activity-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivity(
      authorization?: string,
      origin?: string,
      options?: any
    ): AxiosPromise<Array<Activity>> {
      return localVarFp
        .getActivity(authorization, origin, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 会議の参加者を入力するドロップダウンリスト等に使用
     * @summary /admin-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [email]
     * @param {string} [likely]
     * @param {string} [slim]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdmin(
      authorization?: string,
      origin?: string,
      email?: string,
      likely?: string,
      slim?: string,
      options?: any
    ): AxiosPromise<Array<Admin>> {
      return localVarFp
        .getAdmin(authorization, origin, email, likely, slim, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * return admin acitivity by id
     * @summary /admin/{id}/activity-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [authenticatable]
     * @param {string} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdminActivity(
      id: string,
      authorization?: string,
      origin?: string,
      authenticatable?: string,
      page?: string,
      options?: any
    ): AxiosPromise<Array<Activity>> {
      return localVarFp
        .getAdminActivity(
          id,
          authorization,
          origin,
          authenticatable,
          page,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * return admin by id
     * @summary /admin/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAdminId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: any
    ): AxiosPromise<Array<Admin>> {
      return localVarFp
        .getAdminId(id, authorization, origin, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * ブログチャート
     * @summary /blog/chart-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [group]
     * @param {string} [createdByTable]
     * @param {string} [createdBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlogChart(
      authorization?: string,
      origin?: string,
      group?: string,
      createdByTable?: string,
      createdBy?: string,
      options?: any
    ): AxiosPromise<Array<ChatMessage>> {
      return localVarFp
        .getBlogChart(
          authorization,
          origin,
          group,
          createdByTable,
          createdBy,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * チャットチャート
     * @summary /chat/chart-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [group]
     * @param {string} [createdByTable]
     * @param {string} [createdBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChatChart(
      authorization?: string,
      origin?: string,
      group?: string,
      createdByTable?: string,
      createdBy?: string,
      options?: any
    ): AxiosPromise<Array<ChatMessage>> {
      return localVarFp
        .getChatChart(
          authorization,
          origin,
          group,
          createdByTable,
          createdBy,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * チャット報告
     * @summary /chat_report-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChatReport(
      authorization?: string,
      origin?: string,
      options?: any
    ): AxiosPromise<Array<Activity>> {
      return localVarFp
        .getChatReport(authorization, origin, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * return current admin
     * @summary /admin/current-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentAdmin(
      authorization?: string,
      origin?: string,
      options?: any
    ): AxiosPromise<Admin> {
      return localVarFp
        .getCurrentAdmin(authorization, origin, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 部署一覧
     * @summary /department-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [name]
     * @param {string} [likely]
     * @param {string} [departmentCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDepartment(
      authorization?: string,
      origin?: string,
      name?: string,
      likely?: string,
      departmentCode?: string,
      options?: any
    ): AxiosPromise<Array<Department>> {
      return localVarFp
        .getDepartment(
          authorization,
          origin,
          name,
          likely,
          departmentCode,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * return department by id
     * @summary /department/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDepartmentId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: any
    ): AxiosPromise<Department> {
      return localVarFp
        .getDepartmentId(id, authorization, origin, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 会議室一覧
     * @summary /meeting_place-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [name]
     * @param {string} [likely]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeetingPlace(
      authorization?: string,
      origin?: string,
      name?: string,
      likely?: string,
      options?: any
    ): AxiosPromise<Array<MeetingPlace>> {
      return localVarFp
        .getMeetingPlace(authorization, origin, name, likely, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * return meeting place by id
     * @summary /meeting_place/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeetingPlaceId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: any
    ): AxiosPromise<MeetingPlace> {
      return localVarFp
        .getMeetingPlaceId(id, authorization, origin, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 議事録チャート
     * @summary /meeting_record/chart-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [group]
     * @param {string} [createdByTable]
     * @param {string} [createdBy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeetingRecordChart(
      authorization?: string,
      origin?: string,
      group?: string,
      createdByTable?: string,
      createdBy?: string,
      options?: any
    ): AxiosPromise<Array<MeetingRecord>> {
      return localVarFp
        .getMeetingRecordChart(
          authorization,
          origin,
          group,
          createdByTable,
          createdBy,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * 都道府県一覧
     * @summary /prefecture-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPrefecture(
      authorization?: string,
      origin?: string,
      options?: any
    ): AxiosPromise<Array<Progress>> {
      return localVarFp
        .getPrefecture(authorization, origin, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 進捗度一覧
     * @summary /progress-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [name]
     * @param {string} [likely]
     * @param {string} [value]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProgress(
      authorization?: string,
      origin?: string,
      name?: string,
      likely?: string,
      value?: string,
      options?: any
    ): AxiosPromise<Array<Progress>> {
      return localVarFp
        .getProgress(authorization, origin, name, likely, value, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * return progress by id
     * @summary /progress/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProgressId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: any
    ): AxiosPromise<Progress> {
      return localVarFp
        .getProgressId(id, authorization, origin, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoot(
      authorization?: string,
      origin?: string,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .getRoot(authorization, origin, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 会議の参加者を入力するドロップダウンリスト等に使用
     * @summary /user-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [email]
     * @param {string} [likely]
     * @param {string} [slim]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(
      authorization?: string,
      origin?: string,
      email?: string,
      likely?: string,
      slim?: string,
      options?: any
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getUser(authorization, origin, email, likely, slim, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * return user acitivity by id
     * @summary /user/{id}/activity-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [authenticatable]
     * @param {string} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserActivity(
      id: string,
      authorization?: string,
      origin?: string,
      authenticatable?: string,
      page?: string,
      options?: any
    ): AxiosPromise<Array<Activity>> {
      return localVarFp
        .getUserActivity(
          id,
          authorization,
          origin,
          authenticatable,
          page,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * return user by id
     * @summary /user/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: any
    ): AxiosPromise<User> {
      return localVarFp
        .getUserId(id, authorization, origin, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /activity-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionActivity(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionActivity(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /admin-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionAdmin(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionAdmin(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /blog/chart-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionBlogChart(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionBlogChart(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /chat/chart-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionChatChart(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionChatChart(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /chat_report-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionChatReport(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionChatReport(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /department-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionDepartment(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionDepartment(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /meeting_place-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionMeetingPlace(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionMeetingPlace(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /meeting_record-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionMeetingRecord(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionMeetingRecord(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /progress-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionPrefecture(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionPrefecture(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /progress-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionProgress(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionProgress(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * preflight
     * @summary /task/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionTaskId(id: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .optionTaskId(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /user-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionUser(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionUser(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /user/{id}/activity-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsAdminActivity(id: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .optionsAdminActivity(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /admin/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsAdminId(id: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .optionsAdminId(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /admin/current-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsCurrentAdmin(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionsCurrentAdmin(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /user/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsDepartmentId(id: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .optionsDepartmentId(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /meeting_place/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsMeetingPlaceId(id: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .optionsMeetingPlaceId(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /progress/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsOrganizationId(id: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .optionsOrganizationId(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /progress/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsProgressId(id: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .optionsProgressId(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsRoot(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionsRoot(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /user/{id}/activity-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsUserActivity(id: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .optionsUserActivity(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /user/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsUserId(id: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .optionsUserId(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * post admin
     * @summary /admin-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {UserInputs} [userInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAdmin(
      authorization?: string,
      origin?: string,
      userInputs?: UserInputs,
      options?: any
    ): AxiosPromise<Admin> {
      return localVarFp
        .postAdmin(authorization, origin, userInputs, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * post department
     * @summary /department-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {DepartmentInputs} [departmentInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDepartment(
      authorization?: string,
      origin?: string,
      departmentInputs?: DepartmentInputs,
      options?: any
    ): AxiosPromise<Department> {
      return localVarFp
        .postDepartment(authorization, origin, departmentInputs, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * post meeting place
     * @summary /meeting_place-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {MeetingPlaceInputs} [meetingPlaceInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMeetingPlace(
      authorization?: string,
      origin?: string,
      meetingPlaceInputs?: MeetingPlaceInputs,
      options?: any
    ): AxiosPromise<MeetingPlace> {
      return localVarFp
        .postMeetingPlace(authorization, origin, meetingPlaceInputs, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * post progress
     * @summary /progress-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {ProgressInputs} [progressInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProgress(
      authorization?: string,
      origin?: string,
      progressInputs?: ProgressInputs,
      options?: any
    ): AxiosPromise<Progress> {
      return localVarFp
        .postProgress(authorization, origin, progressInputs, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * post user
     * @summary /user-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {UserInputs} [userInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUser(
      authorization?: string,
      origin?: string,
      userInputs?: UserInputs,
      options?: any
    ): AxiosPromise<User> {
      return localVarFp
        .postUser(authorization, origin, userInputs, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * update admin
     * @summary /admin/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {AdminInputs} [adminInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAdminId(
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      adminInputs?: AdminInputs,
      options?: any
    ): AxiosPromise<Admin> {
      return localVarFp
        .putAdminId(
          id,
          origin,
          authorization,
          xHTTPMethodOverride,
          adminInputs,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * update department
     * @summary /department/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {DepartmentInputs} [departmentInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDepartmentId(
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      departmentInputs?: DepartmentInputs,
      options?: any
    ): AxiosPromise<Department> {
      return localVarFp
        .putDepartmentId(
          id,
          origin,
          authorization,
          xHTTPMethodOverride,
          departmentInputs,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * update meeting place
     * @summary /meeting_place/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {MeetingPlaceInputs} [meetingPlaceInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMeetingPlaceId(
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      meetingPlaceInputs?: MeetingPlaceInputs,
      options?: any
    ): AxiosPromise<MeetingPlace> {
      return localVarFp
        .putMeetingPlaceId(
          id,
          origin,
          authorization,
          xHTTPMethodOverride,
          meetingPlaceInputs,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * update organization
     * @summary /organization/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {OrganizationInputs} [organizationInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrganizationId(
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      organizationInputs?: OrganizationInputs,
      options?: any
    ): AxiosPromise<Organization> {
      return localVarFp
        .putOrganizationId(
          id,
          origin,
          authorization,
          xHTTPMethodOverride,
          organizationInputs,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * update progress
     * @summary /progress/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {ProgressInputs} [progressInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProgressId(
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      progressInputs?: ProgressInputs,
      options?: any
    ): AxiosPromise<Progress> {
      return localVarFp
        .putProgressId(
          id,
          origin,
          authorization,
          xHTTPMethodOverride,
          progressInputs,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * update Task
     * @summary /task/{id}-PUT
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [xHTTPMethodOverride]
     * @param {TaskInputs} [taskInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTaskId(
      id: string,
      authorization?: string,
      origin?: string,
      xHTTPMethodOverride?: string,
      taskInputs?: TaskInputs,
      options?: any
    ): AxiosPromise<Task> {
      return localVarFp
        .putTaskId(
          id,
          authorization,
          origin,
          xHTTPMethodOverride,
          taskInputs,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * update user
     * @summary /user/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {UserInputs} [userInputs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserId(
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      userInputs?: UserInputs,
      options?: any
    ): AxiosPromise<User> {
      return localVarFp
        .putUserId(
          id,
          origin,
          authorization,
          xHTTPMethodOverride,
          userInputs,
          options
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * delete admin
   * @summary /admin/{id}-DELETE
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {object} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteAdminId(
    id: string,
    authorization?: string,
    origin?: string,
    body?: object,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteAdminId(id, authorization, origin, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * delete department
   * @summary /department/{id}-DELETE
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {object} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteDepartmentId(
    id: string,
    authorization?: string,
    origin?: string,
    body?: object,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteDepartmentId(id, authorization, origin, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * delete meeting place
   * @summary /meeting_place/{id}-DELETE
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {object} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteMeetingPlaceId(
    id: string,
    authorization?: string,
    origin?: string,
    body?: object,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteMeetingPlaceId(id, authorization, origin, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * delete organization
   * @summary /progress/{id}-DELETE
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {object} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteOrganizationId(
    id: string,
    authorization?: string,
    origin?: string,
    body?: object,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteOrganizationId(id, authorization, origin, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * delete progress
   * @summary /progress/{id}-DELETE
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {object} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteProgressId(
    id: string,
    authorization?: string,
    origin?: string,
    body?: object,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteProgressId(id, authorization, origin, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * delete meeting record
   * @summary /task/{id}-DELETE
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteTaskId(
    id: string,
    authorization?: string,
    origin?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteTaskId(id, authorization, origin, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * delete user
   * @summary /user/{id}-DELETE
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {object} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteUserId(
    id: string,
    authorization?: string,
    origin?: string,
    body?: object,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteUserId(id, authorization, origin, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * アクティビティ
   * @summary /activity-GET
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getActivity(
    authorization?: string,
    origin?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getActivity(authorization, origin, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 会議の参加者を入力するドロップダウンリスト等に使用
   * @summary /admin-GET
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {string} [email]
   * @param {string} [likely]
   * @param {string} [slim]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getAdmin(
    authorization?: string,
    origin?: string,
    email?: string,
    likely?: string,
    slim?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getAdmin(authorization, origin, email, likely, slim, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * return admin acitivity by id
   * @summary /admin/{id}/activity-GET
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {string} [authenticatable]
   * @param {string} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getAdminActivity(
    id: string,
    authorization?: string,
    origin?: string,
    authenticatable?: string,
    page?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getAdminActivity(
        id,
        authorization,
        origin,
        authenticatable,
        page,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * return admin by id
   * @summary /admin/{id}-GET
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getAdminId(
    id: string,
    authorization?: string,
    origin?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getAdminId(id, authorization, origin, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * ブログチャート
   * @summary /blog/chart-GET
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {string} [group]
   * @param {string} [createdByTable]
   * @param {string} [createdBy]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getBlogChart(
    authorization?: string,
    origin?: string,
    group?: string,
    createdByTable?: string,
    createdBy?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getBlogChart(
        authorization,
        origin,
        group,
        createdByTable,
        createdBy,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * チャットチャート
   * @summary /chat/chart-GET
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {string} [group]
   * @param {string} [createdByTable]
   * @param {string} [createdBy]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getChatChart(
    authorization?: string,
    origin?: string,
    group?: string,
    createdByTable?: string,
    createdBy?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getChatChart(
        authorization,
        origin,
        group,
        createdByTable,
        createdBy,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * チャット報告
   * @summary /chat_report-GET
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getChatReport(
    authorization?: string,
    origin?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getChatReport(authorization, origin, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * return current admin
   * @summary /admin/current-GET
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getCurrentAdmin(
    authorization?: string,
    origin?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getCurrentAdmin(authorization, origin, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 部署一覧
   * @summary /department-GET
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {string} [name]
   * @param {string} [likely]
   * @param {string} [departmentCode]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getDepartment(
    authorization?: string,
    origin?: string,
    name?: string,
    likely?: string,
    departmentCode?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getDepartment(
        authorization,
        origin,
        name,
        likely,
        departmentCode,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * return department by id
   * @summary /department/{id}-GET
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getDepartmentId(
    id: string,
    authorization?: string,
    origin?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getDepartmentId(id, authorization, origin, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 会議室一覧
   * @summary /meeting_place-GET
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {string} [name]
   * @param {string} [likely]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMeetingPlace(
    authorization?: string,
    origin?: string,
    name?: string,
    likely?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getMeetingPlace(authorization, origin, name, likely, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * return meeting place by id
   * @summary /meeting_place/{id}-GET
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMeetingPlaceId(
    id: string,
    authorization?: string,
    origin?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getMeetingPlaceId(id, authorization, origin, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 議事録チャート
   * @summary /meeting_record/chart-GET
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {string} [group]
   * @param {string} [createdByTable]
   * @param {string} [createdBy]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMeetingRecordChart(
    authorization?: string,
    origin?: string,
    group?: string,
    createdByTable?: string,
    createdBy?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getMeetingRecordChart(
        authorization,
        origin,
        group,
        createdByTable,
        createdBy,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 都道府県一覧
   * @summary /prefecture-GET
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getPrefecture(
    authorization?: string,
    origin?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getPrefecture(authorization, origin, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 進捗度一覧
   * @summary /progress-GET
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {string} [name]
   * @param {string} [likely]
   * @param {string} [value]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getProgress(
    authorization?: string,
    origin?: string,
    name?: string,
    likely?: string,
    value?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getProgress(authorization, origin, name, likely, value, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * return progress by id
   * @summary /progress/{id}-GET
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getProgressId(
    id: string,
    authorization?: string,
    origin?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getProgressId(id, authorization, origin, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getRoot(
    authorization?: string,
    origin?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getRoot(authorization, origin, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 会議の参加者を入力するドロップダウンリスト等に使用
   * @summary /user-GET
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {string} [email]
   * @param {string} [likely]
   * @param {string} [slim]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getUser(
    authorization?: string,
    origin?: string,
    email?: string,
    likely?: string,
    slim?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getUser(authorization, origin, email, likely, slim, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * return user acitivity by id
   * @summary /user/{id}/activity-GET
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {string} [authenticatable]
   * @param {string} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getUserActivity(
    id: string,
    authorization?: string,
    origin?: string,
    authenticatable?: string,
    page?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getUserActivity(
        id,
        authorization,
        origin,
        authenticatable,
        page,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * return user by id
   * @summary /user/{id}-GET
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getUserId(
    id: string,
    authorization?: string,
    origin?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getUserId(id, authorization, origin, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /activity-OPTIONS
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionActivity(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionActivity(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /admin-OPTIONS
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionAdmin(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionAdmin(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /blog/chart-OPTIONS
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionBlogChart(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionBlogChart(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /chat/chart-OPTIONS
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionChatChart(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionChatChart(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /chat_report-OPTIONS
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionChatReport(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionChatReport(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /department-OPTIONS
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionDepartment(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionDepartment(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /meeting_place-OPTIONS
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionMeetingPlace(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionMeetingPlace(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /meeting_record-OPTIONS
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionMeetingRecord(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionMeetingRecord(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /progress-OPTIONS
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionPrefecture(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionPrefecture(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /progress-OPTIONS
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionProgress(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionProgress(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * preflight
   * @summary /task/{id}-OPTIONS
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionTaskId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionTaskId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /user-OPTIONS
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionUser(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionUser(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /user/{id}/activity-OPTIONS
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionsAdminActivity(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionsAdminActivity(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /admin/{id}-OPTIONS
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionsAdminId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionsAdminId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /admin/current-OPTIONS
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionsCurrentAdmin(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionsCurrentAdmin(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /user/{id}-OPTIONS
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionsDepartmentId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionsDepartmentId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /meeting_place/{id}-OPTIONS
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionsMeetingPlaceId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionsMeetingPlaceId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /progress/{id}-OPTIONS
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionsOrganizationId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionsOrganizationId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /progress/{id}-OPTIONS
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionsProgressId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionsProgressId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionsRoot(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionsRoot(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /user/{id}/activity-OPTIONS
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionsUserActivity(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionsUserActivity(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /user/{id}-OPTIONS
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionsUserId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionsUserId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * post admin
   * @summary /admin-POST
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {UserInputs} [userInputs]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postAdmin(
    authorization?: string,
    origin?: string,
    userInputs?: UserInputs,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .postAdmin(authorization, origin, userInputs, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * post department
   * @summary /department-POST
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {DepartmentInputs} [departmentInputs]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postDepartment(
    authorization?: string,
    origin?: string,
    departmentInputs?: DepartmentInputs,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .postDepartment(authorization, origin, departmentInputs, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * post meeting place
   * @summary /meeting_place-POST
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {MeetingPlaceInputs} [meetingPlaceInputs]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postMeetingPlace(
    authorization?: string,
    origin?: string,
    meetingPlaceInputs?: MeetingPlaceInputs,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .postMeetingPlace(authorization, origin, meetingPlaceInputs, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * post progress
   * @summary /progress-POST
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {ProgressInputs} [progressInputs]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postProgress(
    authorization?: string,
    origin?: string,
    progressInputs?: ProgressInputs,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .postProgress(authorization, origin, progressInputs, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * post user
   * @summary /user-POST
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {UserInputs} [userInputs]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postUser(
    authorization?: string,
    origin?: string,
    userInputs?: UserInputs,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .postUser(authorization, origin, userInputs, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * update admin
   * @summary /admin/{id}-PUT
   * @param {string} id
   * @param {string} [origin]
   * @param {string} [authorization]
   * @param {string} [xHTTPMethodOverride]
   * @param {AdminInputs} [adminInputs]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putAdminId(
    id: string,
    origin?: string,
    authorization?: string,
    xHTTPMethodOverride?: string,
    adminInputs?: AdminInputs,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .putAdminId(
        id,
        origin,
        authorization,
        xHTTPMethodOverride,
        adminInputs,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * update department
   * @summary /department/{id}-PUT
   * @param {string} id
   * @param {string} [origin]
   * @param {string} [authorization]
   * @param {string} [xHTTPMethodOverride]
   * @param {DepartmentInputs} [departmentInputs]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putDepartmentId(
    id: string,
    origin?: string,
    authorization?: string,
    xHTTPMethodOverride?: string,
    departmentInputs?: DepartmentInputs,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .putDepartmentId(
        id,
        origin,
        authorization,
        xHTTPMethodOverride,
        departmentInputs,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * update meeting place
   * @summary /meeting_place/{id}-PUT
   * @param {string} id
   * @param {string} [origin]
   * @param {string} [authorization]
   * @param {string} [xHTTPMethodOverride]
   * @param {MeetingPlaceInputs} [meetingPlaceInputs]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putMeetingPlaceId(
    id: string,
    origin?: string,
    authorization?: string,
    xHTTPMethodOverride?: string,
    meetingPlaceInputs?: MeetingPlaceInputs,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .putMeetingPlaceId(
        id,
        origin,
        authorization,
        xHTTPMethodOverride,
        meetingPlaceInputs,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * update organization
   * @summary /organization/{id}-PUT
   * @param {string} id
   * @param {string} [origin]
   * @param {string} [authorization]
   * @param {string} [xHTTPMethodOverride]
   * @param {OrganizationInputs} [organizationInputs]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putOrganizationId(
    id: string,
    origin?: string,
    authorization?: string,
    xHTTPMethodOverride?: string,
    organizationInputs?: OrganizationInputs,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .putOrganizationId(
        id,
        origin,
        authorization,
        xHTTPMethodOverride,
        organizationInputs,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * update progress
   * @summary /progress/{id}-PUT
   * @param {string} id
   * @param {string} [origin]
   * @param {string} [authorization]
   * @param {string} [xHTTPMethodOverride]
   * @param {ProgressInputs} [progressInputs]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putProgressId(
    id: string,
    origin?: string,
    authorization?: string,
    xHTTPMethodOverride?: string,
    progressInputs?: ProgressInputs,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .putProgressId(
        id,
        origin,
        authorization,
        xHTTPMethodOverride,
        progressInputs,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * update Task
   * @summary /task/{id}-PUT
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {string} [xHTTPMethodOverride]
   * @param {TaskInputs} [taskInputs]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putTaskId(
    id: string,
    authorization?: string,
    origin?: string,
    xHTTPMethodOverride?: string,
    taskInputs?: TaskInputs,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .putTaskId(
        id,
        authorization,
        origin,
        xHTTPMethodOverride,
        taskInputs,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * update user
   * @summary /user/{id}-PUT
   * @param {string} id
   * @param {string} [origin]
   * @param {string} [authorization]
   * @param {string} [xHTTPMethodOverride]
   * @param {UserInputs} [userInputs]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putUserId(
    id: string,
    origin?: string,
    authorization?: string,
    xHTTPMethodOverride?: string,
    userInputs?: UserInputs,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .putUserId(
        id,
        origin,
        authorization,
        xHTTPMethodOverride,
        userInputs,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
