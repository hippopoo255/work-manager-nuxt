/* tslint:disable */
/* eslint-disable */
/**
 * job-support-api-beta
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-02-07T01:46:56Z
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 * 通知
 * @export
 * @interface Activity
 */
export interface Activity {
  /**
   *
   * @type {number}
   * @memberof Activity
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof Activity
   */
  user_id: number
  /**
   *
   * @type {number}
   * @memberof Activity
   */
  action_type_id: number
  /**
   *
   * @type {boolean}
   * @memberof Activity
   */
  is_read?: boolean
  /**
   *
   * @type {number}
   * @memberof Activity
   */
  model_id?: number
  /**
   *
   * @type {string}
   * @memberof Activity
   */
  content?: string
  /**
   *
   * @type {string}
   * @memberof Activity
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Activity
   */
  updated_at: string
}
/**
 * 認証時のデータ
 * @export
 * @interface Admin
 */
export interface Admin {
  /**
   * ユーザーID
   * @type {number}
   * @memberof Admin
   */
  id: number
  /**
   * フルネーム
   * @type {string}
   * @memberof Admin
   */
  full_name: string
  /**
   * 名
   * @type {string}
   * @memberof Admin
   */
  given_name?: string
  /**
   * 姓
   * @type {string}
   * @memberof Admin
   */
  family_name?: string
  /**
   * ファイルパス
   * @type {string}
   * @memberof Admin
   */
  file_path?: string | null
  /**
   *
   * @type {string}
   * @memberof Admin
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Admin
   */
  updated_at: string
}
/**
 * 認証時のデータ
 * @export
 * @interface AuthenticatedAdmin
 */
export interface AuthenticatedAdmin {
  /**
   * ユーザーID
   * @type {number}
   * @memberof AuthenticatedAdmin
   */
  id: number
  /**
   * フルネーム
   * @type {string}
   * @memberof AuthenticatedAdmin
   */
  full_name: string
  /**
   * 名
   * @type {string}
   * @memberof AuthenticatedAdmin
   */
  given_name?: string
  /**
   * 姓
   * @type {string}
   * @memberof AuthenticatedAdmin
   */
  family_name?: string
  /**
   * ファイルパス
   * @type {string}
   * @memberof AuthenticatedAdmin
   */
  file_path?: string | null
  /**
   *
   * @type {string}
   * @memberof AuthenticatedAdmin
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof AuthenticatedAdmin
   */
  updated_at: string
  /**
   *
   * @type {string}
   * @memberof AuthenticatedAdmin
   */
  jwt?: string
}
/**
 * ブログ
 * @export
 * @interface Blog
 */
export interface Blog {
  /**
   *
   * @type {number}
   * @memberof Blog
   */
  id: number
  /**
   *
   * @type {User}
   * @memberof Blog
   */
  written_by: User
  /**
   * タイトル
   * @type {string}
   * @memberof Blog
   */
  title: string
  /**
   * 記事の内容
   * @type {string}
   * @memberof Blog
   */
  body: string
  /**
   *
   * @type {string}
   * @memberof Blog
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Blog
   */
  updated_at: string
  /**
   *
   * @type {Array<BlogImage>}
   * @memberof Blog
   */
  images?: Array<BlogImage>
  /**
   *
   * @type {Array<User>}
   * @memberof Blog
   */
  likes: Array<User>
  /**
   *
   * @type {Array<BlogComment>}
   * @memberof Blog
   */
  comments: Array<BlogComment>
  /**
   *
   * @type {Array<Tag>}
   * @memberof Blog
   */
  tags: Array<Tag>
}
/**
 * ブログへのコメント
 * @export
 * @interface BlogComment
 */
export interface BlogComment {
  /**
   *
   * @type {number}
   * @memberof BlogComment
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof BlogComment
   */
  blog_id: number
  /**
   *
   * @type {User}
   * @memberof BlogComment
   */
  written_by: User
  /**
   *
   * @type {string}
   * @memberof BlogComment
   */
  body: string
  /**
   *
   * @type {string}
   * @memberof BlogComment
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof BlogComment
   */
  updated_at: string
}
/**
 * Blogのコメントフォーム
 * @export
 * @interface BlogCommentForm
 */
export interface BlogCommentForm {
  /**
   *
   * @type {number}
   * @memberof BlogCommentForm
   */
  written_by: number
  /**
   *
   * @type {string}
   * @memberof BlogCommentForm
   */
  body: string
}
/**
 * Blogの投稿フォーム
 * @export
 * @interface BlogForm
 */
export interface BlogForm {
  /**
   *
   * @type {string}
   * @memberof BlogForm
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof BlogForm
   */
  body: string
  /**
   *
   * @type {number}
   * @memberof BlogForm
   */
  written_by?: number
  /**
   *
   * @type {Array<object>}
   * @memberof BlogForm
   */
  images?: Array<object>
  /**
   * 初投稿時はなくても良い
   * @type {Array<string>}
   * @memberof BlogForm
   */
  file_paths?: Array<string>
  /**
   *
   * @type {Array<number>}
   * @memberof BlogForm
   */
  tags?: Array<number>
}
/**
 * ブログ画像
 * @export
 * @interface BlogImage
 */
export interface BlogImage {
  /**
   *
   * @type {number}
   * @memberof BlogImage
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof BlogImage
   */
  blog_id: number
  /**
   *
   * @type {string}
   * @memberof BlogImage
   */
  file_path: string
  /**
   *
   * @type {string}
   * @memberof BlogImage
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof BlogImage
   */
  updated_at: string
}
/**
 * ブログ一覧のページ（ページャつき）
 * @export
 * @interface BlogPage
 */
export interface BlogPage {
  /**
   *
   * @type {Array<Blog>}
   * @memberof BlogPage
   */
  data: Array<Blog>
  /**
   * 1ページ目のURL
   * @type {string}
   * @memberof BlogPage
   */
  first_page_url: string
  /**
   * 現在のitemの開始位置
   * @type {number}
   * @memberof BlogPage
   */
  from: number | null
  /**
   * 最大ページ数
   * @type {number}
   * @memberof BlogPage
   */
  last_page: number
  /**
   * 最終ページのURL
   * @type {string}
   * @memberof BlogPage
   */
  last_page_url: string
  /**
   * 次ページのURL
   * @type {string}
   * @memberof BlogPage
   */
  next_page_url: string | null
  /**
   * 前ページのURL
   * @type {string}
   * @memberof BlogPage
   */
  path: string
  /**
   * 1ページあたりのアイテム数
   * @type {number}
   * @memberof BlogPage
   */
  per_page: number
  /**
   * 前ページのURL
   * @type {string}
   * @memberof BlogPage
   */
  prev_page_url: string | null
  /**
   * 現在のitemの終了位置
   * @type {number}
   * @memberof BlogPage
   */
  to: number | null
  /**
   * item総数
   * @type {number}
   * @memberof BlogPage
   */
  total: number
}
/**
 * ユーザが任意でパスワードを変更したい時
 * @export
 * @interface ChangePasswordInput
 */
export interface ChangePasswordInput {
  /**
   *
   * @type {string}
   * @memberof ChangePasswordInput
   */
  old_password: string
  /**
   *
   * @type {string}
   * @memberof ChangePasswordInput
   */
  password: string
  /**
   *
   * @type {string}
   * @memberof ChangePasswordInput
   */
  password_confirmation: string
}
/**
 * チャットメッセージ
 * @export
 * @interface ChatMessage
 */
export interface ChatMessage {
  /**
   *
   * @type {number}
   * @memberof ChatMessage
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof ChatMessage
   */
  body: string
  /**
   *
   * @type {User}
   * @memberof ChatMessage
   */
  written_by: User
  /**
   *
   * @type {User}
   * @memberof ChatMessage
   */
  to?: User
  /**
   *
   * @type {Array<ChatMessageImage>}
   * @memberof ChatMessage
   */
  images?: Array<ChatMessageImage>
  /**
   *
   * @type {Array<Reaction>}
   * @memberof ChatMessage
   */
  reactions?: Array<Reaction>
  /**
   *
   * @type {Array<User>}
   * @memberof ChatMessage
   */
  chat_message_reads?: Array<User>
  /**
   *
   * @type {string}
   * @memberof ChatMessage
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof ChatMessage
   */
  updated_at: string
  /**
   *
   * @type {boolean}
   * @memberof ChatMessage
   */
  mine?: boolean | null
}
/**
 * ChatMessageの投稿フォーム
 * @export
 * @interface ChatMessageForm
 */
export interface ChatMessageForm {
  /**
   *
   * @type {number}
   * @memberof ChatMessageForm
   */
  id?: number
  /**
   *
   * @type {number}
   * @memberof ChatMessageForm
   */
  written_by: number
  /**
   *
   * @type {number}
   * @memberof ChatMessageForm
   */
  mentioned_to: number | null
  /**
   *
   * @type {string}
   * @memberof ChatMessageForm
   */
  body: string
  /**
   *
   * @type {Array<object>}
   * @memberof ChatMessageForm
   */
  files?: Array<object>
}
/**
 * チャット画像
 * @export
 * @interface ChatMessageImage
 */
export interface ChatMessageImage {
  /**
   *
   * @type {number}
   * @memberof ChatMessageImage
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof ChatMessageImage
   */
  chat_message_id?: number
  /**
   *
   * @type {string}
   * @memberof ChatMessageImage
   */
  file_path: string
  /**
   *
   * @type {string}
   * @memberof ChatMessageImage
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof ChatMessageImage
   */
  updated_at: string
}
/**
 * 既読
 * @export
 * @interface ChatMessageRead
 */
export interface ChatMessageRead {
  /**
   *
   * @type {number}
   * @memberof ChatMessageRead
   */
  id: number
  /**
   * 権限値
   * @type {number}
   * @memberof ChatMessageRead
   */
  chat_message_id: number
  /**
   *
   * @type {User}
   * @memberof ChatMessageRead
   */
  member: User
  /**
   *
   * @type {string}
   * @memberof ChatMessageRead
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof ChatMessageRead
   */
  updated_at: string
}
/**
 * チャットルーム
 * @export
 * @interface ChatRoom
 */
export interface ChatRoom {
  /**
   *
   * @type {number}
   * @memberof ChatRoom
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof ChatRoom
   */
  name: string
  /**
   *
   * @type {Array<User>}
   * @memberof ChatRoom
   */
  members: Array<User>
  /**
   *
   * @type {Array<ChatMessage>}
   * @memberof ChatRoom
   */
  messages: Array<ChatMessage>
  /**
   *
   * @type {string}
   * @memberof ChatRoom
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof ChatRoom
   */
  updated_at: string
  /**
   *
   * @type {Array<LastRead>}
   * @memberof ChatRoom
   */
  last_reads?: Array<LastRead>
  /**
   *
   * @type {number}
   * @memberof ChatRoom
   */
  unread_count?: number
}
/**
 * ChatRoomの投稿フォーム
 * @export
 * @interface ChatRoomForm
 */
export interface ChatRoomForm {
  /**
   *
   * @type {number}
   * @memberof ChatRoomForm
   */
  created_by: number | null
  /**
   *
   * @type {string}
   * @memberof ChatRoomForm
   */
  name: string | null
  /**
   *
   * @type {object}
   * @memberof ChatRoomForm
   */
  members?: object
}
/**
 * DefaultError
 * @export
 * @interface DefaultError
 */
export interface DefaultError {
  /**
   * エラーメッセージ
   * @type {string}
   * @memberof DefaultError
   */
  message?: string
}
/**
 * ドキュメントファイル
 * @export
 * @interface DocumentFile
 */
export interface DocumentFile {
  /**
   *
   * @type {number}
   * @memberof DocumentFile
   */
  id: number
  /**
   *
   * @type {User}
   * @memberof DocumentFile
   */
  uploaded_by: User
  /**
   *
   * @type {string}
   * @memberof DocumentFile
   */
  file_path: string
  /**
   *
   * @type {string}
   * @memberof DocumentFile
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof DocumentFile
   */
  updated_at: string
  /**
   *
   * @type {Array<User>}
   * @memberof DocumentFile
   */
  shared_members?: Array<User>
}
/**
 * DocumentFileの投稿フォーム
 * @export
 * @interface DocumentFileForm
 */
export interface DocumentFileForm {
  /**
   *
   * @type {number}
   * @memberof DocumentFileForm
   */
  uploaded_by: number
  /**
   *
   * @type {string}
   * @memberof DocumentFileForm
   */
  file: string
  /**
   *
   * @type {object}
   * @memberof DocumentFileForm
   */
  sharedMembers?: object
  /**
   * 更新時のみ
   * @type {string}
   * @memberof DocumentFileForm
   */
  file_path?: string
}
/**
 * ドキュメントフォルダ
 * @export
 * @interface DocumentFolder
 */
export interface DocumentFolder {
  /**
   *
   * @type {number}
   * @memberof DocumentFolder
   */
  id: number
  /**
   *
   * @type {User}
   * @memberof DocumentFolder
   */
  created_by: User
  /**
   *
   * @type {string}
   * @memberof DocumentFolder
   */
  name: string
  /**
   *
   * @type {Role}
   * @memberof DocumentFolder
   */
  role?: Role
  /**
   *
   * @type {string}
   * @memberof DocumentFolder
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof DocumentFolder
   */
  updated_at: string
}
/**
 * DocumentFolderの投稿フォーム
 * @export
 * @interface DocumentFolderForm
 */
export interface DocumentFolderForm {
  /**
   *
   * @type {number}
   * @memberof DocumentFolderForm
   */
  created_by?: number
  /**
   *
   * @type {string}
   * @memberof DocumentFolderForm
   */
  name: string
  /**
   *
   * @type {number}
   * @memberof DocumentFolderForm
   */
  role_id?: number
}
/**
 * FacialExpression
 * @export
 * @interface FacialExpression
 */
export interface FacialExpression {
  /**
   * エラーメッセージ
   * @type {number}
   * @memberof FacialExpression
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof FacialExpression
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof FacialExpression
   */
  file_path: string
}
/**
 * ForbiddenError
 * @export
 * @interface ForbiddenError
 */
export interface ForbiddenError {
  /**
   * エラーメッセージ
   * @type {string}
   * @memberof ForbiddenError
   */
  message?: string
}
/**
 * InvalidError
 * @export
 * @interface InvalidError
 */
export interface InvalidError {
  /**
   * エラーメッセージ
   * @type {string}
   * @memberof InvalidError
   */
  message?: string
  /**
   * フォームアイテムごとのエラーメッセージ
   * @type {{ [key: string]: any; }}
   * @memberof InvalidError
   */
  errors?: { [key: string]: any }
}
/**
 * ユーザごとの最後に読んだメッセージ
 * @export
 * @interface LastRead
 */
export interface LastRead {
  /**
   *
   * @type {number}
   * @memberof LastRead
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof LastRead
   */
  chat_room_id: number
  /**
   *
   * @type {number}
   * @memberof LastRead
   */
  member_id: number
  /**
   *
   * @type {number}
   * @memberof LastRead
   */
  last_message_id: number
  /**
   *
   * @type {string}
   * @memberof LastRead
   */
  created_at?: string
}
/**
 * ログインIDとパスワードのフォーム
 * @export
 * @interface LoginBody
 */
export interface LoginBody {
  /**
   *
   * @type {string}
   * @memberof LoginBody
   */
  login_id: string
  /**
   *
   * @type {string}
   * @memberof LoginBody
   */
  password: string
}
/**
 * ミーティング決定事項
 * @export
 * @interface MeetingDecision
 */
export interface MeetingDecision {
  /**
   *
   * @type {number}
   * @memberof MeetingDecision
   */
  id: number
  /**
   *
   * @type {User}
   * @memberof MeetingDecision
   */
  decided_by: User
  /**
   *
   * @type {User}
   * @memberof MeetingDecision
   */
  written_by: User
  /**
   *
   * @type {string}
   * @memberof MeetingDecision
   */
  subject: string
  /**
   *
   * @type {string}
   * @memberof MeetingDecision
   */
  body: string
  /**
   *
   * @type {Array<Task>}
   * @memberof MeetingDecision
   */
  tasks?: Array<Task>
}
/**
 * ミーティング決定事項フォーム
 * @export
 * @interface MeetingDecisionForm
 */
export interface MeetingDecisionForm {
  /**
   *
   * @type {number}
   * @memberof MeetingDecisionForm
   */
  id?: number
  /**
   *
   * @type {number}
   * @memberof MeetingDecisionForm
   */
  decided_by?: number | null
  /**
   *
   * @type {number}
   * @memberof MeetingDecisionForm
   */
  written_by: number
  /**
   *
   * @type {string}
   * @memberof MeetingDecisionForm
   */
  subject?: string | null
  /**
   *
   * @type {string}
   * @memberof MeetingDecisionForm
   */
  body: string
  /**
   *
   * @type {Array<TaskForm>}
   * @memberof MeetingDecisionForm
   */
  tasks?: Array<TaskForm>
  /**
   *
   * @type {number}
   * @memberof MeetingDecisionForm
   */
  flag?: number | null
}
/**
 * 議事録一覧のページ（ページャつき）
 * @export
 * @interface MeetingPage
 */
export interface MeetingPage {
  /**
   *
   * @type {Array<MeetingRecord>}
   * @memberof MeetingPage
   */
  data: Array<MeetingRecord>
  /**
   * 1ページ目のURL
   * @type {string}
   * @memberof MeetingPage
   */
  first_page_url: string
  /**
   * 現在のitemの開始位置
   * @type {number}
   * @memberof MeetingPage
   */
  from: number | null
  /**
   * 最大ページ数
   * @type {number}
   * @memberof MeetingPage
   */
  last_page: number
  /**
   * 最終ページのURL
   * @type {string}
   * @memberof MeetingPage
   */
  last_page_url: string
  /**
   * 次ページのURL
   * @type {string}
   * @memberof MeetingPage
   */
  next_page_url: string | null
  /**
   * 前ページのURL
   * @type {string}
   * @memberof MeetingPage
   */
  path: string
  /**
   * 1ページあたりのアイテム数
   * @type {number}
   * @memberof MeetingPage
   */
  per_page: number
  /**
   * 前ページのURL
   * @type {string}
   * @memberof MeetingPage
   */
  prev_page_url: string | null
  /**
   * 現在のitemの終了位置
   * @type {number}
   * @memberof MeetingPage
   */
  to: number | null
  /**
   * item総数
   * @type {number}
   * @memberof MeetingPage
   */
  total: number
}
/**
 * ミーティング開催場所
 * @export
 * @interface MeetingPlace
 */
export interface MeetingPlace {
  /**
   *
   * @type {number}
   * @memberof MeetingPlace
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof MeetingPlace
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof MeetingPlace
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof MeetingPlace
   */
  updated_at: string
}
/**
 * ミーティングレコード
 * @export
 * @interface MeetingRecord
 */
export interface MeetingRecord {
  /**
   *
   * @type {number}
   * @memberof MeetingRecord
   */
  id: number
  /**
   *
   * @type {User}
   * @memberof MeetingRecord
   */
  recorded_by: User
  /**
   *
   * @type {string}
   * @memberof MeetingRecord
   */
  meeting_date: string
  /**
   *
   * @type {MeetingPlace}
   * @memberof MeetingRecord
   */
  place: MeetingPlace
  /**
   *
   * @type {string}
   * @memberof MeetingRecord
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof MeetingRecord
   */
  summary: string | null
  /**
   *
   * @type {Array<User>}
   * @memberof MeetingRecord
   */
  members: Array<User>
  /**
   *
   * @type {Array<MeetingDecision>}
   * @memberof MeetingRecord
   */
  decisions: Array<MeetingDecision>
  /**
   *
   * @type {string}
   * @memberof MeetingRecord
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof MeetingRecord
   */
  updated_at: string
}
/**
 * 会議議事録投稿フォーム
 * @export
 * @interface MeetingRecordForm
 */
export interface MeetingRecordForm {
  /**
   *
   * @type {number}
   * @memberof MeetingRecordForm
   */
  recorded_by: number
  /**
   *
   * @type {number}
   * @memberof MeetingRecordForm
   */
  place_id?: number | null
  /**
   *
   * @type {string}
   * @memberof MeetingRecordForm
   */
  meeting_date: string
  /**
   *
   * @type {string}
   * @memberof MeetingRecordForm
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof MeetingRecordForm
   */
  summary?: string | null
  /**
   *
   * @type {Array<MeetingDecisionForm>}
   * @memberof MeetingRecordForm
   */
  meeting_decisions?: Array<MeetingDecisionForm>
  /**
   *
   * @type {Array<number>}
   * @memberof MeetingRecordForm
   */
  members?: Array<number>
}
/**
 * 議事録一覧のページ（ページャつき）
 * @export
 * @interface MeetingRecordPage
 */
export interface MeetingRecordPage {
  /**
   *
   * @type {Array<MeetingRecord>}
   * @memberof MeetingRecordPage
   */
  data: Array<MeetingRecord>
  /**
   * 1ページ目のURL
   * @type {string}
   * @memberof MeetingRecordPage
   */
  first_page_url: string
  /**
   * 現在のitemの開始位置
   * @type {number}
   * @memberof MeetingRecordPage
   */
  from: number | null
  /**
   * 最大ページ数
   * @type {number}
   * @memberof MeetingRecordPage
   */
  last_page: number
  /**
   * 最終ページのURL
   * @type {string}
   * @memberof MeetingRecordPage
   */
  last_page_url: string
  /**
   * 次ページのURL
   * @type {string}
   * @memberof MeetingRecordPage
   */
  next_page_url: string | null
  /**
   * 前ページのURL
   * @type {string}
   * @memberof MeetingRecordPage
   */
  path: string
  /**
   * 1ページあたりのアイテム数
   * @type {number}
   * @memberof MeetingRecordPage
   */
  per_page: number
  /**
   * 前ページのURL
   * @type {string}
   * @memberof MeetingRecordPage
   */
  prev_page_url: string | null
  /**
   * 現在のitemの終了位置
   * @type {number}
   * @memberof MeetingRecordPage
   */
  to: number | null
  /**
   * item総数
   * @type {number}
   * @memberof MeetingRecordPage
   */
  total: number
}
/**
 * 共有相手用フォーム
 * @export
 * @interface MemberForm
 */
export interface MemberForm {
  /**
   *
   * @type {number}
   * @memberof MemberForm
   */
  recorded_by: number
  /**
   *
   * @type {number}
   * @memberof MemberForm
   */
  place_id?: number | null
  /**
   *
   * @type {string}
   * @memberof MemberForm
   */
  meeting_date: string
  /**
   *
   * @type {string}
   * @memberof MemberForm
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof MemberForm
   */
  summary?: string | null
  /**
   *
   * @type {Array<MeetingDecisionForm>}
   * @memberof MemberForm
   */
  meeting_decisions?: Array<MeetingDecisionForm>
  /**
   *
   * @type {Array<number>}
   * @memberof MemberForm
   */
  members?: Array<number>
}
/**
 * NotFoundError
 * @export
 * @interface NotFoundError
 */
export interface NotFoundError {
  /**
   * エラーメッセージ
   * @type {string}
   * @memberof NotFoundError
   */
  message?: string
}
/**
 * 組織
 * @export
 * @interface Organization
 */
export interface Organization {
  /**
   *
   * @type {number}
   * @memberof Organization
   */
  id: number
  /**
   * 優先度
   * @type {string}
   * @memberof Organization
   */
  name: string
  /**
   * 優先度
   * @type {string}
   * @memberof Organization
   */
  name_kana?: string
  /**
   * 優先値
   * @type {number}
   * @memberof Organization
   */
  pref_id?: number
  /**
   * 優先値
   * @type {number}
   * @memberof Organization
   */
  postal_code?: number
  /**
   * 優先度
   * @type {string}
   * @memberof Organization
   */
  city?: string
  /**
   * 優先度
   * @type {string}
   * @memberof Organization
   */
  address?: string
  /**
   * 優先度
   * @type {string}
   * @memberof Organization
   */
  tel?: string
  /**
   * 優先値
   * @type {number}
   * @memberof Organization
   */
  supervisor_id?: number
  /**
   *
   * @type {string}
   * @memberof Organization
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Organization
   */
  updated_at: string
}
/**
 * 組織情報登録時のフォーム
 * @export
 * @interface OrganizationForm
 */
export interface OrganizationForm {
  /**
   *
   * @type {string}
   * @memberof OrganizationForm
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof OrganizationForm
   */
  name_kana: string
  /**
   *
   * @type {string}
   * @memberof OrganizationForm
   */
  postal_code: string
  /**
   *
   * @type {number}
   * @memberof OrganizationForm
   */
  pref_id: number
  /**
   *
   * @type {string}
   * @memberof OrganizationForm
   */
  city: string
  /**
   *
   * @type {string}
   * @memberof OrganizationForm
   */
  address: string
  /**
   *
   * @type {string}
   * @memberof OrganizationForm
   */
  tel: string
  /**
   *
   * @type {string}
   * @memberof OrganizationForm
   */
  password: string
}
/**
 * 都道府県
 * @export
 * @interface Prefecture
 */
export interface Prefecture {
  /**
   *
   * @type {number}
   * @memberof Prefecture
   */
  id: number
  /**
   * 優先度
   * @type {string}
   * @memberof Prefecture
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof Prefecture
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Prefecture
   */
  updated_at: string
}
/**
 * TODOの優先度
 * @export
 * @interface Priority
 */
export interface Priority {
  /**
   *
   * @type {number}
   * @memberof Priority
   */
  id: number
  /**
   * 優先度
   * @type {string}
   * @memberof Priority
   */
  name: string
  /**
   * 優先値
   * @type {number}
   * @memberof Priority
   */
  value: number
  /**
   *
   * @type {string}
   * @memberof Priority
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Priority
   */
  updated_at: string
}
/**
 * プロフィール更新時のフォーム
 * @export
 * @interface ProfileForm
 */
export interface ProfileForm {
  /**
   *
   * @type {string}
   * @memberof ProfileForm
   */
  family_name: string
  /**
   *
   * @type {string}
   * @memberof ProfileForm
   */
  given_name: string
  /**
   *
   * @type {string}
   * @memberof ProfileForm
   */
  family_name_kana: string
  /**
   *
   * @type {string}
   * @memberof ProfileForm
   */
  given_name_kana: string
  /**
   *
   * @type {boolean}
   * @memberof ProfileForm
   */
  delete_flag?: boolean
  /**
   *
   * @type {any}
   * @memberof ProfileForm
   */
  file?: any
  /**
   *
   * @type {boolean}
   * @memberof ProfileForm
   */
  change_password?: boolean
}
/**
 * TODOの達成度
 * @export
 * @interface Progress
 */
export interface Progress {
  /**
   *
   * @type {number}
   * @memberof Progress
   */
  id: number
  /**
   * 達成度
   * @type {string}
   * @memberof Progress
   */
  name: string
  /**
   * 達成値
   * @type {number}
   * @memberof Progress
   */
  value: number
  /**
   *
   * @type {string}
   * @memberof Progress
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Progress
   */
  updated_at: string
}
/**
 * リアクション
 * @export
 * @interface Reaction
 */
export interface Reaction {
  /**
   *
   * @type {number}
   * @memberof Reaction
   */
  id: number
  /**
   * 権限値
   * @type {number}
   * @memberof Reaction
   */
  chat_message_id: number
  /**
   *
   * @type {User}
   * @memberof Reaction
   */
  member: User
  /**
   *
   * @type {FacialExpression}
   * @memberof Reaction
   */
  facial_expression: FacialExpression
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  updated_at: string
}
/**
 * ロール
 * @export
 * @interface Role
 */
export interface Role {
  /**
   *
   * @type {number}
   * @memberof Role
   */
  id: number
  /**
   * 権限名
   * @type {string}
   * @memberof Role
   */
  name: string
  /**
   * 権限値
   * @type {number}
   * @memberof Role
   */
  value: number
  /**
   *
   * @type {string}
   * @memberof Role
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Role
   */
  updated_at: string
}
/**
 * スケジュール
 * @export
 * @interface Schedule
 */
export interface Schedule {
  /**
   *
   * @type {number}
   * @memberof Schedule
   */
  id: number
  /**
   *
   * @type {User}
   * @memberof Schedule
   */
  scheduled_by: User
  /**
   *
   * @type {string}
   * @memberof Schedule
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof Schedule
   */
  start: string
  /**
   *
   * @type {string}
   * @memberof Schedule
   */
  end: string
  /**
   *
   * @type {boolean}
   * @memberof Schedule
   */
  is_public?: boolean
  /**
   *
   * @type {string}
   * @memberof Schedule
   */
  color?: string | null
  /**
   *
   * @type {string}
   * @memberof Schedule
   */
  memo?: string | null
  /**
   *
   * @type {Array<User>}
   * @memberof Schedule
   */
  shared_members: Array<User>
  /**
   *
   * @type {string}
   * @memberof Schedule
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Schedule
   */
  updated_at: string
}
/**
 * Scheduleの投稿フォーム
 * @export
 * @interface ScheduleForm
 */
export interface ScheduleForm {
  /**
   *
   * @type {number}
   * @memberof ScheduleForm
   */
  scheduled_by: number
  /**
   *
   * @type {string}
   * @memberof ScheduleForm
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof ScheduleForm
   */
  start: string
  /**
   *
   * @type {string}
   * @memberof ScheduleForm
   */
  end: string
  /**
   *
   * @type {boolean}
   * @memberof ScheduleForm
   */
  is_public: boolean | null
  /**
   *
   * @type {string}
   * @memberof ScheduleForm
   */
  color: string | null
  /**
   *
   * @type {string}
   * @memberof ScheduleForm
   */
  memo: string | null
  /**
   *
   * @type {object}
   * @memberof ScheduleForm
   */
  sharedMembers?: object
}
/**
 * 設定ページ
 * @export
 * @interface SettingForm
 */
export interface SettingForm {
  /**
   *
   * @type {object}
   * @memberof SettingForm
   */
  notify_validation?: object
  /**
   *
   * @type {ChangePasswordInput}
   * @memberof SettingForm
   */
  change_password?: ChangePasswordInput
}
/**
 * Tag
 * @export
 * @interface Tag
 */
export interface Tag {
  /**
   *
   * @type {number}
   * @memberof Tag
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof Tag
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof Tag
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Tag
   */
  updated_at: string
}
/**
 * Task
 * @export
 * @interface Task
 */
export interface Task {
  /**
   *
   * @type {number}
   * @memberof Task
   */
  id: number
  /**
   *
   * @type {User}
   * @memberof Task
   */
  owner: User
  /**
   *
   * @type {User}
   * @memberof Task
   */
  created_by: User
  /**
   *
   * @type {Priority}
   * @memberof Task
   */
  priority: Priority
  /**
   *
   * @type {Progress}
   * @memberof Task
   */
  progress: Progress
  /**
   *
   * @type {string}
   * @memberof Task
   */
  body: string
  /**
   *
   * @type {string}
   * @memberof Task
   */
  time_limit: string
  /**
   *
   * @type {string}
   * @memberof Task
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof Task
   */
  updated_at: string
}
/**
 * TaskDeleteForm
 * @export
 * @interface TaskDeleteForm
 */
export interface TaskDeleteForm {
  /**
   *
   * @type {Array<number>}
   * @memberof TaskDeleteForm
   */
  ids?: Array<number>
}
/**
 * Taskの投稿フォーム
 * @export
 * @interface TaskForm
 */
export interface TaskForm {
  /**
   *
   * @type {number}
   * @memberof TaskForm
   */
  id?: number
  /**
   *
   * @type {number}
   * @memberof TaskForm
   */
  owner_id: number
  /**
   *
   * @type {number}
   * @memberof TaskForm
   */
  created_by?: number
  /**
   *
   * @type {number}
   * @memberof TaskForm
   */
  priority_id?: number | null
  /**
   *
   * @type {number}
   * @memberof TaskForm
   */
  progress_id?: number | null
  /**
   *
   * @type {string}
   * @memberof TaskForm
   */
  body: string
  /**
   *
   * @type {string}
   * @memberof TaskForm
   */
  time_limit: string
  /**
   *
   * @type {number}
   * @memberof TaskForm
   */
  flag?: number | null
}
/**
 * タスク一覧のページ（ページャつき）
 * @export
 * @interface TaskPage
 */
export interface TaskPage {
  /**
   *
   * @type {Array<Task>}
   * @memberof TaskPage
   */
  data: Array<Task>
  /**
   * 1ページ目のURL
   * @type {string}
   * @memberof TaskPage
   */
  first_page_url: string
  /**
   * 現在のitemの開始位置
   * @type {number}
   * @memberof TaskPage
   */
  from: number | null
  /**
   * 最大ページ数
   * @type {number}
   * @memberof TaskPage
   */
  last_page: number
  /**
   * 最終ページのURL
   * @type {string}
   * @memberof TaskPage
   */
  last_page_url: string
  /**
   * 次ページのURL
   * @type {string}
   * @memberof TaskPage
   */
  next_page_url: string | null
  /**
   * 前ページのURL
   * @type {string}
   * @memberof TaskPage
   */
  path: string
  /**
   * 1ページあたりのアイテム数
   * @type {number}
   * @memberof TaskPage
   */
  per_page: number
  /**
   * 前ページのURL
   * @type {string}
   * @memberof TaskPage
   */
  prev_page_url: string | null
  /**
   * 現在のitemの終了位置
   * @type {number}
   * @memberof TaskPage
   */
  to: number | null
  /**
   * item総数
   * @type {number}
   * @memberof TaskPage
   */
  total: number
}
/**
 * ユーザーのデータ
 * @export
 * @interface User
 */
export interface User {
  /**
   * ユーザーID
   * @type {number}
   * @memberof User
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string
  /**
   * フルネーム
   * @type {string}
   * @memberof User
   */
  full_name: string
  /**
   * 名
   * @type {string}
   * @memberof User
   */
  given_name?: string
  /**
   * 姓
   * @type {string}
   * @memberof User
   */
  family_name?: string
  /**
   * ファイルパス
   * @type {string}
   * @memberof User
   */
  file_path?: string | null
  /**
   *
   * @type {string}
   * @memberof User
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  updated_at: string
}
/**
 * ユーザー投稿フォーム
 * @export
 * @interface UserForm
 */
export interface UserForm {
  /**
   *
   * @type {string}
   * @memberof UserForm
   */
  given_name: string
  /**
   *
   * @type {string}
   * @memberof UserForm
   */
  given_name_kana: string
  /**
   *
   * @type {string}
   * @memberof UserForm
   */
  family_name: string
  /**
   *
   * @type {string}
   * @memberof UserForm
   */
  family_name_kana: string
  /**
   *
   * @type {string}
   * @memberof UserForm
   */
  email: string
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * delete schedule
     * @summary /schedule/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScheduleId: async (
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteScheduleId', 'id', id)
      const localVarPath = `/schedule/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * delete meeting record
     * @summary /task/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaskId: async (
      id: string,
      authorization?: string,
      origin?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteTaskId', 'id', id)
      const localVarPath = `/task/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * return current admin
     * @summary /admin/current-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentAdmin: async (
      authorization?: string,
      origin?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin/current`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoot: async (
      authorization?: string,
      origin?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * return schedule by id
     * @summary /schedule/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScheduleId: async (
      id: string,
      authorization?: string,
      origin?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getScheduleId', 'id', id)
      const localVarPath = `/schedule/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 会議の参加者を入力するドロップダウンリスト等に使用
     * @summary /user-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [email]
     * @param {string} [likely]
     * @param {string} [slim]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (
      authorization?: string,
      origin?: string,
      email?: string,
      likely?: string,
      slim?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (email !== undefined) {
        localVarQueryParameter['email'] = email
      }

      if (likely !== undefined) {
        localVarQueryParameter['likely'] = likely
      }

      if (slim !== undefined) {
        localVarQueryParameter['slim'] = slim
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * preflight
     * @summary /task/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionTaskId: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('optionTaskId', 'id', id)
      const localVarPath = `/task/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /user-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionUser: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /admin/current-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsCurrentAdmin: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin/current`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsRoot: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary /document_folder/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsScheduleId: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('optionsScheduleId', 'id', id)
      const localVarPath = `/schedule/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'OPTIONS',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * post user
     * @summary /user-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {UserForm} [userForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUser: async (
      authorization?: string,
      origin?: string,
      userForm?: UserForm,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        userForm,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * update schedule
     * @summary /schedule/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {ScheduleForm} [scheduleForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putScheduleId: async (
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      scheduleForm?: ScheduleForm,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putScheduleId', 'id', id)
      const localVarPath = `/schedule/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (xHTTPMethodOverride !== undefined && xHTTPMethodOverride !== null) {
        localVarHeaderParameter['X-HTTP-Method-Override'] =
          String(xHTTPMethodOverride)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        scheduleForm,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * update task
     * @summary /task/{id}-PUT
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [xHTTPMethodOverride]
     * @param {TaskForm} [taskForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTaskId: async (
      id: string,
      authorization?: string,
      origin?: string,
      xHTTPMethodOverride?: string,
      taskForm?: TaskForm,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putTaskId', 'id', id)
      const localVarPath = `/task/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication job-support-authorizer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        'Authorization',
        configuration
      )

      if (authorization !== undefined && authorization !== null) {
        localVarHeaderParameter['Authorization'] = String(authorization)
      }

      if (origin !== undefined && origin !== null) {
        localVarHeaderParameter['Origin'] = String(origin)
      }

      if (xHTTPMethodOverride !== undefined && xHTTPMethodOverride !== null) {
        localVarHeaderParameter['X-HTTP-Method-Override'] =
          String(xHTTPMethodOverride)
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        taskForm,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
  return {
    /**
     * delete schedule
     * @summary /schedule/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteScheduleId(
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schedule>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteScheduleId(
          id,
          authorization,
          origin,
          body,
          options
        )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * delete meeting record
     * @summary /task/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTaskId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskPage>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTaskId(
        id,
        authorization,
        origin,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * return current admin
     * @summary /admin/current-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrentAdmin(
      authorization?: string,
      origin?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentAdmin(
        authorization,
        origin,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRoot(
      authorization?: string,
      origin?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRoot(
        authorization,
        origin,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * return schedule by id
     * @summary /schedule/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getScheduleId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Schedule>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getScheduleId(
        id,
        authorization,
        origin,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * 会議の参加者を入力するドロップダウンリスト等に使用
     * @summary /user-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [email]
     * @param {string} [likely]
     * @param {string} [slim]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      authorization?: string,
      origin?: string,
      email?: string,
      likely?: string,
      slim?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(
        authorization,
        origin,
        email,
        likely,
        slim,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * preflight
     * @summary /task/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionTaskId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.optionTaskId(
        id,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /user-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionUser(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.optionUser(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /admin/current-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionsCurrentAdmin(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.optionsCurrentAdmin(options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionsRoot(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.optionsRoot(
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary /document_folder/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async optionsScheduleId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.optionsScheduleId(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * post user
     * @summary /user-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {UserForm} [userForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postUser(
      authorization?: string,
      origin?: string,
      userForm?: UserForm,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postUser(
        authorization,
        origin,
        userForm,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * update schedule
     * @summary /schedule/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {ScheduleForm} [scheduleForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putScheduleId(
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      scheduleForm?: ScheduleForm,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schedule>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putScheduleId(
        id,
        origin,
        authorization,
        xHTTPMethodOverride,
        scheduleForm,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     * update task
     * @summary /task/{id}-PUT
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [xHTTPMethodOverride]
     * @param {TaskForm} [taskForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putTaskId(
      id: string,
      authorization?: string,
      origin?: string,
      xHTTPMethodOverride?: string,
      taskForm?: TaskForm,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putTaskId(
        id,
        authorization,
        origin,
        xHTTPMethodOverride,
        taskForm,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration)
  return {
    /**
     * delete schedule
     * @summary /schedule/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScheduleId(
      id: string,
      authorization?: string,
      origin?: string,
      body?: object,
      options?: any
    ): AxiosPromise<Schedule> {
      return localVarFp
        .deleteScheduleId(id, authorization, origin, body, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * delete meeting record
     * @summary /task/{id}-DELETE
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaskId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: any
    ): AxiosPromise<TaskPage> {
      return localVarFp
        .deleteTaskId(id, authorization, origin, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * return current admin
     * @summary /admin/current-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentAdmin(
      authorization?: string,
      origin?: string,
      options?: any
    ): AxiosPromise<Admin> {
      return localVarFp
        .getCurrentAdmin(authorization, origin, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoot(
      authorization?: string,
      origin?: string,
      options?: any
    ): AxiosPromise<object> {
      return localVarFp
        .getRoot(authorization, origin, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * return schedule by id
     * @summary /schedule/{id}-GET
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScheduleId(
      id: string,
      authorization?: string,
      origin?: string,
      options?: any
    ): AxiosPromise<Array<Schedule>> {
      return localVarFp
        .getScheduleId(id, authorization, origin, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 会議の参加者を入力するドロップダウンリスト等に使用
     * @summary /user-GET
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [email]
     * @param {string} [likely]
     * @param {string} [slim]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(
      authorization?: string,
      origin?: string,
      email?: string,
      likely?: string,
      slim?: string,
      options?: any
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getUser(authorization, origin, email, likely, slim, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * preflight
     * @summary /task/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionTaskId(id: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .optionTaskId(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /user-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionUser(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionUser(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /admin/current-OPTIONS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsCurrentAdmin(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionsCurrentAdmin(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsRoot(options?: any): AxiosPromise<object> {
      return localVarFp
        .optionsRoot(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary /document_folder/{id}-OPTIONS
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    optionsScheduleId(id: string, options?: any): AxiosPromise<object> {
      return localVarFp
        .optionsScheduleId(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * post user
     * @summary /user-POST
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {UserForm} [userForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUser(
      authorization?: string,
      origin?: string,
      userForm?: UserForm,
      options?: any
    ): AxiosPromise<User> {
      return localVarFp
        .postUser(authorization, origin, userForm, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * update schedule
     * @summary /schedule/{id}-PUT
     * @param {string} id
     * @param {string} [origin]
     * @param {string} [authorization]
     * @param {string} [xHTTPMethodOverride]
     * @param {ScheduleForm} [scheduleForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putScheduleId(
      id: string,
      origin?: string,
      authorization?: string,
      xHTTPMethodOverride?: string,
      scheduleForm?: ScheduleForm,
      options?: any
    ): AxiosPromise<Schedule> {
      return localVarFp
        .putScheduleId(
          id,
          origin,
          authorization,
          xHTTPMethodOverride,
          scheduleForm,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * update task
     * @summary /task/{id}-PUT
     * @param {string} id
     * @param {string} [authorization]
     * @param {string} [origin]
     * @param {string} [xHTTPMethodOverride]
     * @param {TaskForm} [taskForm]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTaskId(
      id: string,
      authorization?: string,
      origin?: string,
      xHTTPMethodOverride?: string,
      taskForm?: TaskForm,
      options?: any
    ): AxiosPromise<Task> {
      return localVarFp
        .putTaskId(
          id,
          authorization,
          origin,
          xHTTPMethodOverride,
          taskForm,
          options
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * delete schedule
   * @summary /schedule/{id}-DELETE
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {object} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteScheduleId(
    id: string,
    authorization?: string,
    origin?: string,
    body?: object,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteScheduleId(id, authorization, origin, body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * delete meeting record
   * @summary /task/{id}-DELETE
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteTaskId(
    id: string,
    authorization?: string,
    origin?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteTaskId(id, authorization, origin, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * return current admin
   * @summary /admin/current-GET
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getCurrentAdmin(
    authorization?: string,
    origin?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getCurrentAdmin(authorization, origin, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getRoot(
    authorization?: string,
    origin?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getRoot(authorization, origin, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * return schedule by id
   * @summary /schedule/{id}-GET
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getScheduleId(
    id: string,
    authorization?: string,
    origin?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getScheduleId(id, authorization, origin, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 会議の参加者を入力するドロップダウンリスト等に使用
   * @summary /user-GET
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {string} [email]
   * @param {string} [likely]
   * @param {string} [slim]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getUser(
    authorization?: string,
    origin?: string,
    email?: string,
    likely?: string,
    slim?: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getUser(authorization, origin, email, likely, slim, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * preflight
   * @summary /task/{id}-OPTIONS
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionTaskId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionTaskId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /user-OPTIONS
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionUser(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionUser(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /admin/current-OPTIONS
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionsCurrentAdmin(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionsCurrentAdmin(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionsRoot(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionsRoot(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary /document_folder/{id}-OPTIONS
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public optionsScheduleId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .optionsScheduleId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * post user
   * @summary /user-POST
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {UserForm} [userForm]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postUser(
    authorization?: string,
    origin?: string,
    userForm?: UserForm,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .postUser(authorization, origin, userForm, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * update schedule
   * @summary /schedule/{id}-PUT
   * @param {string} id
   * @param {string} [origin]
   * @param {string} [authorization]
   * @param {string} [xHTTPMethodOverride]
   * @param {ScheduleForm} [scheduleForm]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putScheduleId(
    id: string,
    origin?: string,
    authorization?: string,
    xHTTPMethodOverride?: string,
    scheduleForm?: ScheduleForm,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .putScheduleId(
        id,
        origin,
        authorization,
        xHTTPMethodOverride,
        scheduleForm,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * update task
   * @summary /task/{id}-PUT
   * @param {string} id
   * @param {string} [authorization]
   * @param {string} [origin]
   * @param {string} [xHTTPMethodOverride]
   * @param {TaskForm} [taskForm]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putTaskId(
    id: string,
    authorization?: string,
    origin?: string,
    xHTTPMethodOverride?: string,
    taskForm?: TaskForm,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .putTaskId(
        id,
        authorization,
        origin,
        xHTTPMethodOverride,
        taskForm,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }
}
